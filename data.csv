"resource_id","text","tag_stack"
"1460043871"," How to setup an experiment on Web
This assumes that the actual experiment has been created in the Optimizely dashboard
The web app is wrapped in the <ABTestProvider /> component which is an abstraction over Optimizely’s <OptimizelyProvider />  component. This lets us leverage Optimizely’s SDK to handle the heavy lifting of managing and updating bucketing state, so we only have to worry about using the bucketing decision object to change the UI.On the frontend, we just need to call the useDecision() hook to get the user bucketing decision.
import { useDecision } from '@optimizely/react-sdk';

const SomeComponent = () => {
  const [decision] = useDecision('flag-key');
  
  return (
    <section>
      {decision?.enabled 
        ? <p>Enabled decision</p>
        : </p>Disabled decision</p>
      }
    </section>
  )
}

Considerations with Enterprise We don’t instantiate the SDK in the enterprise version of the application, but general codebase is the same. Because of this, we need to be careful when setting up AB tests on pages (or even in individual components) that are shared between the direct to consumer and enterprise variations of the application. We must write code that will remain functioning normally in the event that a decision is undefined or otherwise not the expected data shape. Optional chaining is our friend.Using autoUpdateWe can pass an options object to the useDecision hook (see docs link below), and one of the options we can provide is autoUpdate. autoUpdate tells Optimizely to update the user’s experiment bucketing status whenever the attributes in the user context object (or the datafile) change. This only matters in the following situations:We want to bucket the user based on their is_admin status for QA verificationWe’ve added additional fields to the user attributes object we pass to the wrapped <OptimizelyProvider /> in <ABTestProvider />, and want to use those as bucketing decision criteriaWhen and why do we need to auto update?Bucketing decisions happen on the first render of a NextJS page or legacy React Router route. Due to the nuances of how we’re managing state on the frontend, on the initial render of a user’s first page load the data object returned by useUserData is an empty object (technically it’s the defaultUserDataInjectedInHtml object, but for our purposes it’s empty). Then once the useUserData hook resolves and the data object updates we have the real data for our user, but the bucketing has already happened. Because of this, if we don’t have autoUpdate set to true, we can have situations where a user that should be bucketed into an experiment, but isn’t due to the sequence of when we get the data for that user and when the bucketing happens.Docs: https://docs.developers.optimizely.com/experimentation/v4.0.0-full-stack/docs/usedecision-react#arguments Creating a manual decisionIf we need to manually create a decision and for whatever reason we can’t use useDecision (for example, if adhering to the rules of hooks is creating extreme complexity or otherwise preventing us from getting a test working), it is possible to create a decision manually. To do this, we use the useABTestContext hook (a façade over useContext(OptimizelyContext), where the OptimizelyContext is a React context object provided by their React SDK), and do the following:
async function someABTestFunction() {
  const ctx = useABTestContext();
  if (!ctx || !ctx?.optimizely) return;
  const { optimizely } = ctx;
  // we have to wait for the SDK to be ready, otherwise we'll get errors
  // can also use .then() syntax here
  await optimizely.onReady();
  const [decision] = optimizely?.decide('flagKey');
  return decision;
}
For a more in-depth example, see the useLogABTestError custom hook below:
export const useLogABTestError = (err: any): string|null => {
  const { variant } = useAppVariant();
  const ctx = useABTestContext();
  const [abTestErrSent, setAbTestErrSent] = useState(false);
  const [eventId, setEventId] = useState<string|null>(null);
  const logTestErr = useCallback(async () => {
    if (!ctx || !ctx?.optimizely) return;
    const { optimizely } = ctx;
    await optimizely.onReady();
    const decisionData = optimizely.decideAll([
    // this lets us call the Optimizely decision API without actually sending
    // a decision event, so this is filtered out of our reporting
      OptimizelyDecideOption.DISABLE_DECISION_EVENT,
    ]);
    const [decision] = optimizely?.decide('key');
    const errorLabel = Object
      .keys(decisionData)
      .map(key => `${key}:${decisionData[key].variationKey}`)
      .sort()
      .join(';');
    const sentryEventId = Sentry.captureException(err, {
      tags: {
        abTest: errorLabel,
      },
    });
    setAbTestErrSent(true);
    setEventId(sentryEventId);
  }, [err]);
  useEffect(() => {
    // AB testing is not enabled on AccoladeCare
    if (variant === AppVariants.PlushCare && !abTestErrSent) {
      logTestErr();
    }
  }, [abTestErrSent, ctx, err, logTestErr, variant]);
  return eventId;
};
Server-side decisionsWe’re currently only using the Optimizely React SDK for our AB testing purposes. If we run into a situation where we need to use a server-side decision to bucket the user, we have a few options:Use the Python SDK on API to handle the test thereUse the Node SDK on web to handle the decision inside of getServerSidePropsAs of 2023-03-29 neither of these options are supported, and will need to be set up prior to usage.Creating an experiment in OptimizelyIn the Optimizely dashboard, navigate to Flags → All Flags → Create New FlagIn the modal that appears, add a Name (internal label) for the flag, and the Key (this is what we pass to useDecision or manual decision function calls)Add a rule for the experiment. The rule needs a name (internal label) and a key (the variationKey value we get back from decisions, or pass into decision function calls). We then need to set up the parameters for the rule:AudiencesAudiences can be used to apply an experiment to a specific subset of users that we’ve defined an audience for. For example, we can use the QA audience to only expose QA users to a test to verify that a test is working correctly before rolling the test out to actual users.Ramp percentageThis is the percentage of users that are considered for being bucketed into a test variant. 100% ramp percentage means that 100% of users will be bucketed into the test in some way. 50% would mean half the users that navigate to a route with a call to useDecision (or a manual decision function) would be bucketed into the test and exposed to a variant (whether that’s an experiment variant or the control), and the rest would see whatever the default experience is, and would not show up in Optimizely’s reporting tools.MetricsThese are the specific KPIs that we want to track as part of our experiment. Usually we’ll always have at least the Appointment Booked event being tracked, and other metrics will depend on the specifics of the test.Distribution modeFor most cases we should just use manual, but Optimizely also has a “Stats accelerator” option https://support.optimizely.com/hc/en-us/articles/4410283570701-Get-to-statistical-significance-faster-with-Stats-Accelerator VariationsThese are the individual variations that we want to bucket a user into. For an AB test these will usually just be On and Off, whereas for a multivariate test we need to add descriptive names that we can use to change the UI based on the variationKey returned by the decision object.Enable the flag and any experiment rules. The flag should be switched to “On” and the play button in the top right of the rule should have a pause icon.Working with multiple variantsFor any “regular” AB test where you have an on and off variant, checking the decision.enabled value will be all you need to do. However, if you’re running a multivariate test, or you need to in some way use the actual variation that was selected for the user, you need to use the field decision.variationKey. This will give you the string value of the variant, which you can find in the “Variations” tab when viewing a flag in the Optimizely dashboard.Disabled vs OffThe off variant in Optimizely is required for every flag/experiment/test, and can’t be removed. When a user is evaluated for an experiment but not bucketed into one of the variants, they get bucketed into the off variant for that experiment. In that scenario, the decision object will look something like this:
{
  enabled: false,
  flagKey: ""lnl-demo"",
  reasons: [],
  ruleKey: null,
  userContext: {id: 'some-id', attributes: { someAttr: 'val' }},
  variables: {},
  variationKey: 'off',
}
So for this we could either check decision.enabled or decision.variationKey === 'off' for determining whether or not we should show the user whatever the off variant looks like (usually this will be the control for the experiment).One important note is that if the Optimizely SDK encounters an error when trying to evaluate a feature flag, we’ll get back a decision object that looks a bit different:
{
  enabled: false,
  flagKey: ""lnl-demo"",
  // reasons array may be different if you run into this
  reasons: ['Optimizely SDK not configured properly yet.'],
  ruleKey: null,
  userContext: {id: null, attributes: undefined},
  variables: {},
  variationKey: null,
}
This means that if we have code like this, we have a potential bug:
const SomeComponent = () => {
  const [decision] = useDecision('flag-key');
  return (
    <div>
      {decision.variationKey === 'a' && <p>User is bucketed into 'a'</p>}
      {decision.variationKey === 'b' && <p>User is bucketed into 'b'</p>}
      {decision.variationKey === 'off' && <p>User is bucketed into 'off'</p>}
    </div>
  );
}
If we get an ‘error’ decision object, the decison.variationKey === 'off' check will evaluate to false. To handle this edge case, we should instead treat the off variant like the default case in a switch (or else block in an if/else if/else chain), or explicitly check for decision.enabled. Both of these methods below are valid approaches:
// explicitly checking for `decision.enabled`
const SomeComponent = () => {
  const [decision] = useDecision('flag-key');
  return (
    <div>
      {decision.variationKey === 'a' && <p>User is bucketed into 'a'</p>}
      {decision.variationKey === 'b' && <p>User is bucketed into 'b'</p>}
      {(!decision.enabled || decision.variationKey === 'off') && <p>User is bucketed into 'off'</p>}
    </div>
  );
}

// using a ternary chain
const SomeComponent = () => {
  const [decision] = useDecision('flag-key');
  return (
    <div>
      {decision.variationKey === 'a' 
        ? <p>User is bucketed into 'a'</p>
        : decision.variationKey === 'b'
          ? <p>User is bucketed into 'b'</p>
          : <p>User is bucketed into 'off'</p>}
    </div>
  );
}
Notification listenersOptimizely exposes “notification listeners” on its SDK clients, which allows us to add functions that get called when various SDK events get fired. The snippets below show how this is set up on Web:onDecision is a regular TypeScript function that takes in the decision object from the Optimizely SDK, which automatically gets passed to the function when it’s invoked.We then use the optimizely.notificationCenter's addNotificationListener method to register the onDecision function. The first argument we pass in to addNotificationListener is the key for the notification type we want to trigger (in this case, the DECISION notification), and the second argument is the handler function.We can do essentially whatever we want in these notification listener functions, and on Web (as of 2023/04/28) we fire a Segment event whenever a user bucketing decision is made, and also have an event for if there’s ever a mismatch between the user ID that Optimizely is using, and the Segment anonymous ID. This should never happen due to how we instrument the SDK on web, so we want to know about it if it ever happens, as it would expose a serious problem in how we’ve instrumented the SDK.
export const onDecision = (decision: OptimizelyDecisionNotification) => {
  const { userId, attributes, decisionInfo: { decisionEventDispatched, variationKey, flagKey } } = decision;
  if (decisionEventDispatched) {
    const anonId = Analytics.getSegmentAnonymousId();
    if (anonId !== userId) {
      Analytics.analyticsException('Web - Optimizely User ID Mismatch');
    }
    Analytics.track('Web - Optimizely Decision Notification', { variantID: variationKey, experimentID: flagKey, attributes });
  }
};

  const optimizely = createInstance({
    sdkKey,
    errorHandler,
  });
  optimizely.notificationCenter.addNotificationListener(
    enums.NOTIFICATION_TYPES.DECISION,
    onDecision,
  );
AB Test vs RolloutWhen creating a rule for a test, two of the options you’ll see are “Targeted Delivery” and “AB Test”. In almost all cases what you’ll want to use is an AB Test rule (which also works for running multivariate tests) instead of a Rollout. The reason for this is that Rollouts do not send decision notifications to Optimizely, meaning that we won’t see any metrics in the dashboard. The benefit of a Rollout is that because decision events aren’t sent to Optimizely, it lowers our total impressions usage, which might have contract implications, but in most cases this isn’t really a concern. We almost always want to have actual metrics in our tests so that we can evaluate which variant of a test is performing best, and because of that unless we have a specific need, we should always use AB Test rules.When to use a RolloutRollouts are really meant for one situation: when we’ve finished running an AB test, found the variant that performs the best, and now want to roll that out to all of our users. In this scenario we would disable the existing AB test rule, and enable a Targeted Delivery/Rollout rule that delivers the best performing variant to users. This saves us on usage, and allows us to show all users the best performing variant until we can release code changes that remove the test code, and make the winning variant the new default behaviour. Technically we could just update the existing AB test rule to do this, but generally this method of using a rollout is considered more in-line with best practices.What is Multi-Armed Bandit?Multi-armed bandit is an experiment option provided by Optimizely that uses machine learning to dynamically allocate traffic to test variants that are performing better, based on the metrics selected for the experiment.https://www.optimizely.com/optimization-glossary/multi-armed-bandit/ How audiences and rules work for filteringAudience and delivery rules are evaluated in order from top to bottom.Setting up audiences in Web is as easy as passing in the audience parameters into the Optimizely wrapper, see example belowhttps://github.com/konciergeMD/web/blob/Dev/src/js/abTesting/components/ABTestProvider.tsx#L84
    <OptimizelyProvider
      optimizely={optimizely}
      user={{
        id: userId,
        attributes: {
          is_admin: Boolean(is_admin),
          app_variant: isEnterpriseUser ? AppVariants.AccoladeCare : variant,
          is_logged_in: userData.is_logged_in,
        },
      }}
    >
Lunch n Learn recordinghttps://drive.google.com/file/d/17IFnWJqld51hg1919FsOp02MIkjGuBBk/view?usp=sharing ","[<div class=""toc-macro client-side-toc-macro conf-macro output-block"" data-hasbody=""false"" data-headerelements=""H1,H2,H3,H4,H5,H6,H7"" data-layout=""default"" data-local-id=""611b154d-4331-4838-8a1a-30ecfa36fc66"" data-macro-id=""3f835538-bb04-4f18-8082-cc1d2f9a9a93"" data-macro-name=""toc""> </div><p></p><h2 id=""ABTestingWithOptimizely[Web]-HowtosetupanexperimentonWeb"">How to setup an experiment on Web</h2><div class=""panel conf-macro output-block"" data-hasbody=""true"" data-macro-id="""" data-macro-name=""panel"" style=""background-color: #EAE6FF;border-color: #998DD9;border-width: 1px;""><div class=""panelContent"" style=""background-color: #EAE6FF;"">
<p>This assumes that the actual experiment has been created in the Optimizely dashboard</p>
</div></div><p>The web app is wrapped in the <code>&lt;ABTestProvider /&gt;</code> component which is an abstraction over Optimizely’s <code>&lt;OptimizelyProvider /&gt;</code>  component. This lets us leverage Optimizely’s SDK to handle the heavy lifting of managing and updating bucketing state, so we only have to worry about using the bucketing decision object to change the UI.</p><p>On the frontend, we just need to call the <code>useDecision()</code> hook to get the user bucketing decision.</p><div class=""code panel pdl conf-macro output-block"" data-hasbody=""true"" data-macro-id=""f54b67e8-317e-425b-a94b-68078f0143eb"" data-macro-name=""code"" style=""border-width: 1px;""><div class=""codeContent panelContent pdl"">
<pre class=""syntaxhighlighter-pre"" data-syntaxhighlighter-params=""brush: java; gutter: false; theme: Confluence"" data-theme=""Confluence"">import { useDecision } from '@optimizely/react-sdk';

const SomeComponent = () =&gt; {
  const [decision] = useDecision('flag-key');
  
  return (
    &lt;section&gt;
      {decision?.enabled 
        ? &lt;p&gt;Enabled decision&lt;/p&gt;
        : &lt;/p&gt;Disabled decision&lt;/p&gt;
      }
    &lt;/section&gt;
  )
}
</pre>
</div></div><h3 id=""ABTestingWithOptimizely[Web]-ConsiderationswithEnterprise"">Considerations with Enterprise</h3><div class=""confluence-information-macro confluence-information-macro-note conf-macro output-block"" data-hasbody=""true"" data-macro-id=""f2da9b5c-c3f4-49df-8f31-9efdd393f062"" data-macro-name=""note""><span class=""aui-icon aui-icon-small aui-iconfont-warning confluence-information-macro-icon""> </span><div class=""confluence-information-macro-body""><p>We don’t instantiate the SDK in the enterprise version of the application, but general codebase is the same. Because of this, we need to be careful when setting up AB tests on pages (or even in individual components) that are shared between the direct to consumer and enterprise variations of the application. We <strong>must</strong> write code that will remain functioning normally in the event that a decision is <code>undefined</code> or otherwise not the expected data shape. Optional chaining is our friend.</p></div></div><h3 id=""ABTestingWithOptimizely[Web]-UsingautoUpdate"">Using autoUpdate</h3><p>We can pass an <code>options</code> object to the <code>useDecision</code> hook (see docs link below), and one of the options we can provide is <code>autoUpdate</code>. <code>autoUpdate</code> tells Optimizely to update the user’s experiment bucketing status whenever the attributes in the user context object (or the datafile) change. This only matters in the following situations:</p><ul><li><p>We want to bucket the user based on their <code>is_admin</code> status for QA verification</p></li><li><p>We’ve added additional fields to the user <code>attributes</code> object we pass to the wrapped <code>&lt;OptimizelyProvider /&gt;</code> in <code>&lt;ABTestProvider /&gt;</code>, and want to use those as bucketing decision criteria</p></li></ul><h4 id=""ABTestingWithOptimizely[Web]-Whenandwhydoweneedtoautoupdate?"">When and why do we need to auto update?</h4><p>Bucketing decisions happen on the first render of a NextJS page or legacy React Router route. Due to the nuances of how we’re managing state on the frontend, on the initial render of a user’s first page load the <code>data</code> object returned by <code>useUserData</code> is an empty object (technically it’s the <code>defaultUserDataInjectedInHtml</code> object, but for our purposes it’s empty). Then once the <code>useUserData</code> hook resolves and the <code>data</code> object updates we have the real data for our user, but the bucketing has already happened. Because of this, if we don’t have <code>autoUpdate</code> set to <code>true</code>, we can have situations where a user that <em>should</em> be bucketed into an experiment, but isn’t due to the sequence of when we get the data for that user and when the bucketing happens.</p><p>Docs: <a class=""external-link"" data-card-appearance=""inline"" href=""https://docs.developers.optimizely.com/experimentation/v4.0.0-full-stack/docs/usedecision-react#arguments"" rel=""nofollow"">https://docs.developers.optimizely.com/experimentation/v4.0.0-full-stack/docs/usedecision-react#arguments</a> </p><h3 id=""ABTestingWithOptimizely[Web]-Creatingamanualdecision"">Creating a manual decision</h3><p>If we need to manually create a decision and for whatever reason we can’t use <code>useDecision</code> (for example, if adhering to the rules of hooks is creating extreme complexity or otherwise preventing us from getting a test working), it is possible to create a decision manually. To do this, we use the <code>useABTestContext</code> hook (a façade over <code>useContext(OptimizelyContext)</code>, where the <code>OptimizelyContext</code> is a React context object provided by their React SDK), and do the following:</p><div class=""code panel pdl conf-macro output-block"" data-hasbody=""true"" data-macro-id=""336d024d-0b38-49ea-ac27-07c64cc2a556"" data-macro-name=""code"" style=""border-width: 1px;""><div class=""codeContent panelContent pdl"">
<pre class=""syntaxhighlighter-pre"" data-syntaxhighlighter-params=""brush: java; gutter: false; theme: Confluence"" data-theme=""Confluence"">async function someABTestFunction() {
  const ctx = useABTestContext();
  if (!ctx || !ctx?.optimizely) return;
  const { optimizely } = ctx;
  // we have to wait for the SDK to be ready, otherwise we'll get errors
  // can also use .then() syntax here
  await optimizely.onReady();
  const [decision] = optimizely?.decide('flagKey');
  return decision;
}</pre>
</div></div><p>For a more in-depth example, see the <code>useLogABTestError</code> custom hook below:</p><div class=""code panel pdl conf-macro output-block"" data-hasbody=""true"" data-macro-id=""5fbb4ced-9d0d-493b-b47b-11d8b21b48d2"" data-macro-name=""code"" style=""border-width: 1px;""><div class=""codeContent panelContent pdl"">
<pre class=""syntaxhighlighter-pre"" data-syntaxhighlighter-params=""brush: java; gutter: false; theme: Confluence"" data-theme=""Confluence"">export const useLogABTestError = (err: any): string|null =&gt; {
  const { variant } = useAppVariant();
  const ctx = useABTestContext();
  const [abTestErrSent, setAbTestErrSent] = useState(false);
  const [eventId, setEventId] = useState&lt;string|null&gt;(null);
  const logTestErr = useCallback(async () =&gt; {
    if (!ctx || !ctx?.optimizely) return;
    const { optimizely } = ctx;
    await optimizely.onReady();
    const decisionData = optimizely.decideAll([
    // this lets us call the Optimizely decision API without actually sending
    // a decision event, so this is filtered out of our reporting
      OptimizelyDecideOption.DISABLE_DECISION_EVENT,
    ]);
    const [decision] = optimizely?.decide('key');
    const errorLabel = Object
      .keys(decisionData)
      .map(key =&gt; `${key}:${decisionData[key].variationKey}`)
      .sort()
      .join(';');
    const sentryEventId = Sentry.captureException(err, {
      tags: {
        abTest: errorLabel,
      },
    });
    setAbTestErrSent(true);
    setEventId(sentryEventId);
  }, [err]);
  useEffect(() =&gt; {
    // AB testing is not enabled on AccoladeCare
    if (variant === AppVariants.PlushCare &amp;&amp; !abTestErrSent) {
      logTestErr();
    }
  }, [abTestErrSent, ctx, err, logTestErr, variant]);
  return eventId;
};</pre>
</div></div><h3 id=""ABTestingWithOptimizely[Web]-Server-sidedecisions"">Server-side decisions</h3><p>We’re currently only using the Optimizely React SDK for our AB testing purposes. If we run into a situation where we need to use a server-side decision to bucket the user, we have a few options:</p><ul><li><p>Use the Python SDK on API to handle the test there</p></li><li><p>Use the Node SDK on web to handle the decision inside of <code>getServerSideProps</code></p></li></ul><p>As of 2023-03-29 neither of these options are supported, and will need to be set up prior to usage.</p><p></p><h2 id=""ABTestingWithOptimizely[Web]-CreatinganexperimentinOptimizely"">Creating an experiment in Optimizely</h2><ol start=""1""><li><p>In the Optimizely dashboard, navigate to <strong>Flags</strong> → <strong>All Flags</strong> → <strong>Create New Flag</strong></p></li><li><p>In the modal that appears, add a Name (internal label) for the flag, and the Key (this is what we pass to <code>useDecision</code> or manual decision function calls)</p></li><li><p>Add a rule for the experiment. The rule needs a name (internal label) and a key (the <code>variationKey</code> value we get back from decisions, or pass into decision function calls). We then need to set up the parameters for the rule:</p><ol start=""1""><li><p>Audiences</p><ol start=""1""><li><p>Audiences can be used to apply an experiment to a specific subset of users that we’ve defined an audience for. For example, we can use the QA audience to only expose QA users to a test to verify that a test is working correctly before rolling the test out to actual users.</p></li></ol></li><li><p>Ramp percentage</p><ol start=""1""><li><p>This is the percentage of users that are considered for being bucketed into a test variant. 100% ramp percentage means that 100% of users will be bucketed into the test in some way. 50% would mean half the users that navigate to a route with a call to <code>useDecision</code> (or a manual decision function) would be bucketed into the test and exposed to a variant (whether that’s an experiment variant or the control), and <strong>the rest would see whatever the default experience is, and would not show up in Optimizely’s reporting tools</strong>.</p></li></ol></li><li><p>Metrics</p><ol start=""1""><li><p>These are the specific KPIs that we want to track as part of our experiment. Usually we’ll always have at least the Appointment Booked event being tracked, and other metrics will depend on the specifics of the test.</p></li></ol></li><li><p>Distribution mode</p><ol start=""1""><li><p>For most cases we should just use manual, but Optimizely also has a “Stats accelerator” option <a class=""external-link"" data-card-appearance=""inline"" href=""https://support.optimizely.com/hc/en-us/articles/4410283570701-Get-to-statistical-significance-faster-with-Stats-Accelerator"" rel=""nofollow"">https://support.optimizely.com/hc/en-us/articles/4410283570701-Get-to-statistical-significance-faster-with-Stats-Accelerator</a> </p></li></ol></li><li><p>Variations</p><ol start=""1""><li><p>These are the individual variations that we want to bucket a user into. For an AB test these will usually just be <code>On</code> and <code>Off</code>, whereas for a multivariate test we need to add descriptive names that we can use to change the UI based on the <code>variationKey</code> returned by the decision object.</p></li></ol></li></ol></li><li><p>Enable the flag <strong>and any experiment rules</strong>. The flag should be switched to “On” and the play button in the top right of the rule should have a pause icon.</p></li></ol><span class=""confluence-embedded-file-wrapper image-center-wrapper""><img class=""confluence-embedded-image image-center"" data-base-url=""https://accoladeinc.atlassian.net/wiki"" data-height=""214"" data-image-src=""https://accoladeinc.atlassian.net/wiki/download/attachments/1460043871/Screenshot%202023-03-29%20at%2012.28.54%20PM.png?version=1&amp;modificationDate=1680118398117&amp;cacheVersion=1&amp;api=v2"" data-linked-resource-container-id=""1460043871"" data-linked-resource-container-version=""40"" data-linked-resource-content-type=""image/png"" data-linked-resource-default-alias=""Screenshot 2023-03-29 at 12.28.54 PM.png"" data-linked-resource-id=""1622147657"" data-linked-resource-type=""attachment"" data-linked-resource-version=""1"" data-media-id=""e81fb560-3715-481a-9b0b-39bfad8211bf"" data-media-type=""file"" data-unresolved-comment-count=""0"" data-width=""1773"" loading=""lazy"" src=""https://accoladeinc.atlassian.net/wiki/download/attachments/1460043871/Screenshot%202023-03-29%20at%2012.28.54%20PM.png?version=1&amp;modificationDate=1680118398117&amp;cacheVersion=1&amp;api=v2""/></span><span class=""confluence-embedded-file-wrapper image-center-wrapper""><img class=""confluence-embedded-image image-center"" data-base-url=""https://accoladeinc.atlassian.net/wiki"" data-height=""511"" data-image-src=""https://accoladeinc.atlassian.net/wiki/download/attachments/1460043871/image-20230329-193529.png?version=1&amp;modificationDate=1680118530777&amp;cacheVersion=1&amp;api=v2"" data-linked-resource-container-id=""1460043871"" data-linked-resource-container-version=""40"" data-linked-resource-content-type=""image/png"" data-linked-resource-default-alias=""image-20230329-193529.png"" data-linked-resource-id=""1622802664"" data-linked-resource-type=""attachment"" data-linked-resource-version=""1"" data-media-id=""8206e52e-1de4-4a3d-b938-90a408c4de14"" data-media-type=""file"" data-unresolved-comment-count=""0"" data-width=""546"" loading=""lazy"" src=""https://accoladeinc.atlassian.net/wiki/download/attachments/1460043871/image-20230329-193529.png?version=1&amp;modificationDate=1680118530777&amp;cacheVersion=1&amp;api=v2""/></span><span class=""confluence-embedded-file-wrapper image-center-wrapper""><img class=""confluence-embedded-image image-center"" data-base-url=""https://accoladeinc.atlassian.net/wiki"" data-height=""157"" data-image-src=""https://accoladeinc.atlassian.net/wiki/download/attachments/1460043871/Screenshot%202023-03-29%20at%2012.36.00%20PM.png?version=1&amp;modificationDate=1680118583693&amp;cacheVersion=1&amp;api=v2"" data-linked-resource-container-id=""1460043871"" data-linked-resource-container-version=""40"" data-linked-resource-content-type=""image/png"" data-linked-resource-default-alias=""Screenshot 2023-03-29 at 12.36.00 PM.png"" data-linked-resource-id=""1622213226"" data-linked-resource-type=""attachment"" data-linked-resource-version=""1"" data-media-id=""21f0f9b1-c687-4a50-b7dc-cb14a6b56c04"" data-media-type=""file"" data-unresolved-comment-count=""0"" data-width=""691"" loading=""lazy"" src=""https://accoladeinc.atlassian.net/wiki/download/attachments/1460043871/Screenshot%202023-03-29%20at%2012.36.00%20PM.png?version=1&amp;modificationDate=1680118583693&amp;cacheVersion=1&amp;api=v2""/></span><span class=""confluence-embedded-file-wrapper image-center-wrapper""><img class=""confluence-embedded-image image-center"" data-base-url=""https://accoladeinc.atlassian.net/wiki"" data-height=""762"" data-image-src=""https://accoladeinc.atlassian.net/wiki/download/attachments/1460043871/Screenshot%202023-03-29%20at%2012.37.19%20PM.png?version=1&amp;modificationDate=1680118649245&amp;cacheVersion=1&amp;api=v2"" data-linked-resource-container-id=""1460043871"" data-linked-resource-container-version=""40"" data-linked-resource-content-type=""image/png"" data-linked-resource-default-alias=""Screenshot 2023-03-29 at 12.37.19 PM.png"" data-linked-resource-id=""1622769888"" data-linked-resource-type=""attachment"" data-linked-resource-version=""1"" data-media-id=""c1c381db-b339-4528-8abf-2e25b538781e"" data-media-type=""file"" data-unresolved-comment-count=""0"" data-width=""683"" loading=""lazy"" src=""https://accoladeinc.atlassian.net/wiki/download/attachments/1460043871/Screenshot%202023-03-29%20at%2012.37.19%20PM.png?version=1&amp;modificationDate=1680118649245&amp;cacheVersion=1&amp;api=v2""/></span><span class=""confluence-embedded-file-wrapper image-center-wrapper""><img class=""confluence-embedded-image image-center"" data-base-url=""https://accoladeinc.atlassian.net/wiki"" data-height=""67"" data-image-src=""https://accoladeinc.atlassian.net/wiki/download/attachments/1460043871/Screenshot%202023-03-29%20at%2012.56.24%20PM.png?version=1&amp;modificationDate=1680119821648&amp;cacheVersion=1&amp;api=v2"" data-linked-resource-container-id=""1460043871"" data-linked-resource-container-version=""40"" data-linked-resource-content-type=""image/png"" data-linked-resource-default-alias=""Screenshot 2023-03-29 at 12.56.24 PM.png"" data-linked-resource-id=""1622540605"" data-linked-resource-type=""attachment"" data-linked-resource-version=""1"" data-media-id=""5a56ee5b-8b9b-4088-9160-ba52f4101a93"" data-media-type=""file"" data-unresolved-comment-count=""0"" data-width=""686"" loading=""lazy"" src=""https://accoladeinc.atlassian.net/wiki/download/attachments/1460043871/Screenshot%202023-03-29%20at%2012.56.24%20PM.png?version=1&amp;modificationDate=1680119821648&amp;cacheVersion=1&amp;api=v2""/></span><span class=""confluence-embedded-file-wrapper image-center-wrapper""><img class=""confluence-embedded-image image-center"" data-base-url=""https://accoladeinc.atlassian.net/wiki"" data-height=""70"" data-image-src=""https://accoladeinc.atlassian.net/wiki/download/attachments/1460043871/Screenshot%202023-03-29%20at%2012.57.58%20PM.png?version=1&amp;modificationDate=1680119904942&amp;cacheVersion=1&amp;api=v2"" data-linked-resource-container-id=""1460043871"" data-linked-resource-container-version=""40"" data-linked-resource-content-type=""image/png"" data-linked-resource-default-alias=""Screenshot 2023-03-29 at 12.57.58 PM.png"" data-linked-resource-id=""1623064782"" data-linked-resource-type=""attachment"" data-linked-resource-version=""1"" data-media-id=""28a0459c-f078-4b97-90b5-b6eee3474ad4"" data-media-type=""file"" data-unresolved-comment-count=""0"" data-width=""674"" loading=""lazy"" src=""https://accoladeinc.atlassian.net/wiki/download/attachments/1460043871/Screenshot%202023-03-29%20at%2012.57.58%20PM.png?version=1&amp;modificationDate=1680119904942&amp;cacheVersion=1&amp;api=v2""/></span><p></p><h2 id=""ABTestingWithOptimizely[Web]-Workingwithmultiplevariants"">Working with multiple variants</h2><p>For any “regular” AB test where you have an <code>on</code> and <code>off</code> variant, checking the <code>decision.enabled</code> value will be all you need to do. However, if you’re running a multivariate test, or you need to in some way use the actual variation that was selected for the user, you need to use the field <code>decision.variationKey</code>. This will give you the string value of the variant, which you can find in the “Variations” tab when viewing a flag in the Optimizely dashboard.</p><span class=""confluence-embedded-file-wrapper image-center-wrapper""><img class=""confluence-embedded-image image-center"" data-base-url=""https://accoladeinc.atlassian.net/wiki"" data-height=""142"" data-image-src=""https://accoladeinc.atlassian.net/wiki/download/attachments/1460043871/Screenshot%202023-05-31%20at%2011.06.53%20AM.png?version=1&amp;modificationDate=1685556475160&amp;cacheVersion=1&amp;api=v2"" data-linked-resource-container-id=""1460043871"" data-linked-resource-container-version=""40"" data-linked-resource-content-type=""image/png"" data-linked-resource-default-alias=""Screenshot 2023-05-31 at 11.06.53 AM.png"" data-linked-resource-id=""1716224044"" data-linked-resource-type=""attachment"" data-linked-resource-version=""1"" data-media-id=""c9165a3f-91d2-4524-9550-18ca6a4766a2"" data-media-type=""file"" data-unresolved-comment-count=""0"" data-width=""552"" loading=""lazy"" src=""https://accoladeinc.atlassian.net/wiki/download/attachments/1460043871/Screenshot%202023-05-31%20at%2011.06.53%20AM.png?version=1&amp;modificationDate=1685556475160&amp;cacheVersion=1&amp;api=v2""/></span><h2 id=""ABTestingWithOptimizely[Web]-DisabledvsOff"">Disabled vs Off</h2><p>The <code>off</code> variant in Optimizely is required for every flag/experiment/test, and can’t be removed. When a user is evaluated for an experiment but not bucketed into one of the variants, they get bucketed into the <code>off</code> variant for that experiment. In that scenario, the decision object will look something like this:</p><div class=""code panel pdl conf-macro output-block"" data-hasbody=""true"" data-macro-id=""888b72f2-7425-409c-8244-54898c624d9e"" data-macro-name=""code"" style=""border-width: 1px;""><div class=""codeContent panelContent pdl"">
<pre class=""syntaxhighlighter-pre"" data-syntaxhighlighter-params=""brush: java; gutter: false; theme: Confluence"" data-theme=""Confluence"">{
  enabled: false,
  flagKey: ""lnl-demo"",
  reasons: [],
  ruleKey: null,
  userContext: {id: 'some-id', attributes: { someAttr: 'val' }},
  variables: {},
  variationKey: 'off',
}</pre>
</div></div><p>So for this we could either check <code>decision.enabled</code> <strong>or</strong> <code>decision.variationKey === 'off'</code> for determining whether or not we should show the user whatever the <code>off</code> variant looks like (usually this will be the control for the experiment).</p><p>One important note is that if the Optimizely SDK encounters an error when trying to evaluate a feature flag, we’ll get back a decision object that looks a bit different:</p><div class=""code panel pdl conf-macro output-block"" data-hasbody=""true"" data-macro-id=""f22cfb3c-5e45-4fd8-a170-f284444397d9"" data-macro-name=""code"" style=""border-width: 1px;""><div class=""codeContent panelContent pdl"">
<pre class=""syntaxhighlighter-pre"" data-syntaxhighlighter-params=""brush: java; gutter: false; theme: Confluence"" data-theme=""Confluence"">{
  enabled: false,
  flagKey: ""lnl-demo"",
  // reasons array may be different if you run into this
  reasons: ['Optimizely SDK not configured properly yet.'],
  ruleKey: null,
  userContext: {id: null, attributes: undefined},
  variables: {},
  variationKey: null,
}</pre>
</div></div><p>This means that if we have code like this, we have a potential bug:</p><div class=""code panel pdl conf-macro output-block"" data-hasbody=""true"" data-macro-id=""ebd1c8e8-bbc6-41f1-a90a-85a7f248bf9c"" data-macro-name=""code"" style=""border-width: 1px;""><div class=""codeContent panelContent pdl"">
<pre class=""syntaxhighlighter-pre"" data-syntaxhighlighter-params=""brush: java; gutter: false; theme: Confluence"" data-theme=""Confluence"">const SomeComponent = () =&gt; {
  const [decision] = useDecision('flag-key');
  return (
    &lt;div&gt;
      {decision.variationKey === 'a' &amp;&amp; &lt;p&gt;User is bucketed into 'a'&lt;/p&gt;}
      {decision.variationKey === 'b' &amp;&amp; &lt;p&gt;User is bucketed into 'b'&lt;/p&gt;}
      {decision.variationKey === 'off' &amp;&amp; &lt;p&gt;User is bucketed into 'off'&lt;/p&gt;}
    &lt;/div&gt;
  );
}</pre>
</div></div><p>If we get an ‘error’ decision object, the <code>decison.variationKey === 'off'</code> check will evaluate to <code>false</code>. To handle this edge case, we should instead treat the <code>off</code> variant like the <code>default</code> case in a <code>switch</code> (or <code>else</code> block in an <code>if/else if/else</code> chain), or explicitly check for <code>decision.enabled</code>. Both of these methods below are valid approaches:</p><div class=""code panel pdl conf-macro output-block"" data-hasbody=""true"" data-macro-id=""4af8225b-61cd-4350-b0f1-7f5a57c36bfa"" data-macro-name=""code"" style=""border-width: 1px;""><div class=""codeContent panelContent pdl"">
<pre class=""syntaxhighlighter-pre"" data-syntaxhighlighter-params=""brush: java; gutter: false; theme: Confluence"" data-theme=""Confluence"">// explicitly checking for `decision.enabled`
const SomeComponent = () =&gt; {
  const [decision] = useDecision('flag-key');
  return (
    &lt;div&gt;
      {decision.variationKey === 'a' &amp;&amp; &lt;p&gt;User is bucketed into 'a'&lt;/p&gt;}
      {decision.variationKey === 'b' &amp;&amp; &lt;p&gt;User is bucketed into 'b'&lt;/p&gt;}
      {(!decision.enabled || decision.variationKey === 'off') &amp;&amp; &lt;p&gt;User is bucketed into 'off'&lt;/p&gt;}
    &lt;/div&gt;
  );
}

// using a ternary chain
const SomeComponent = () =&gt; {
  const [decision] = useDecision('flag-key');
  return (
    &lt;div&gt;
      {decision.variationKey === 'a' 
        ? &lt;p&gt;User is bucketed into 'a'&lt;/p&gt;
        : decision.variationKey === 'b'
          ? &lt;p&gt;User is bucketed into 'b'&lt;/p&gt;
          : &lt;p&gt;User is bucketed into 'off'&lt;/p&gt;}
    &lt;/div&gt;
  );
}</pre>
</div></div><h2 id=""ABTestingWithOptimizely[Web]-Notificationlisteners"">Notification listeners</h2><p>Optimizely exposes “notification listeners” on its SDK clients, which allows us to add functions that get called when various SDK events get fired. The snippets below show how this is set up on Web:</p><ul><li><p><code>onDecision</code> is a regular TypeScript function that takes in the <code>decision</code> object from the Optimizely SDK, which automatically gets passed to the function when it’s invoked.</p></li><li><p>We then use the <code>optimizely.notificationCenter</code>'s <code>addNotificationListener</code> method to register the <code>onDecision</code> function. The first argument we pass in to <code>addNotificationListener</code> is the key for the notification type we want to trigger (in this case, the <code>DECISION</code> notification), and the second argument is the handler function.</p></li><li><p>We can do essentially whatever we want in these notification listener functions, and on Web (as of 2023/04/28) we fire a Segment event whenever a user bucketing decision is made, and also have an event for if there’s ever a mismatch between the user ID that Optimizely is using, and the Segment anonymous ID. This should <em>never</em> happen due to how we instrument the SDK on web, so we want to know about it if it ever happens, as it would expose a serious problem in how we’ve instrumented the SDK.</p></li></ul><div class=""code panel pdl conf-macro output-block"" data-hasbody=""true"" data-macro-id=""aed81e2e-ecc6-4808-b3fd-38638424184d"" data-macro-name=""code"" style=""border-width: 1px;""><div class=""codeContent panelContent pdl"">
<pre class=""syntaxhighlighter-pre"" data-syntaxhighlighter-params=""brush: java; gutter: false; theme: Confluence"" data-theme=""Confluence"">export const onDecision = (decision: OptimizelyDecisionNotification) =&gt; {
  const { userId, attributes, decisionInfo: { decisionEventDispatched, variationKey, flagKey } } = decision;
  if (decisionEventDispatched) {
    const anonId = Analytics.getSegmentAnonymousId();
    if (anonId !== userId) {
      Analytics.analyticsException('Web - Optimizely User ID Mismatch');
    }
    Analytics.track('Web - Optimizely Decision Notification', { variantID: variationKey, experimentID: flagKey, attributes });
  }
};</pre>
</div></div><div class=""code panel pdl conf-macro output-block"" data-hasbody=""true"" data-macro-id=""065b2e04-7e81-4a65-b3ea-d1c81b086f5c"" data-macro-name=""code"" style=""border-width: 1px;""><div class=""codeContent panelContent pdl"">
<pre class=""syntaxhighlighter-pre"" data-syntaxhighlighter-params=""brush: java; gutter: false; theme: Confluence"" data-theme=""Confluence"">  const optimizely = createInstance({
    sdkKey,
    errorHandler,
  });
  optimizely.notificationCenter.addNotificationListener(
    enums.NOTIFICATION_TYPES.DECISION,
    onDecision,
  );</pre>
</div></div><h2 id=""ABTestingWithOptimizely[Web]-ABTestvsRollout"">AB Test vs Rollout</h2><p>When creating a rule for a test, two of the options you’ll see are “Targeted Delivery” and “AB Test”. In almost all cases what you’ll want to use is an AB Test rule (which also works for running multivariate tests) instead of a Rollout. The reason for this is that Rollouts <strong>do not send decision notifications</strong> to Optimizely, meaning that we won’t see any metrics in the dashboard. The benefit of a Rollout is that because decision events aren’t sent to Optimizely, it lowers our total impressions usage, which might have contract implications, but in most cases this isn’t really a concern. We almost always want to have actual metrics in our tests so that we can evaluate which variant of a test is performing best, and because of that unless we have a specific need, we should always use AB Test rules.</p><h3 id=""ABTestingWithOptimizely[Web]-WhentouseaRollout"">When to use a Rollout</h3><p>Rollouts are really meant for one situation: when we’ve finished running an AB test, found the variant that performs the best, and now want to roll that out to all of our users. In this scenario we would disable the existing AB test rule, and enable a Targeted Delivery/Rollout rule that delivers the best performing variant to users. This saves us on usage, and allows us to show all users the best performing variant until we can release code changes that remove the test code, and make the winning variant the new default behaviour. Technically we could just update the existing AB test rule to do this, but generally this method of using a rollout is considered more in-line with best practices.</p><h2 id=""ABTestingWithOptimizely[Web]-WhatisMulti-ArmedBandit?"">What is Multi-Armed Bandit?</h2><p>Multi-armed bandit is an experiment option provided by Optimizely that uses machine learning to dynamically allocate traffic to test variants that are performing better, based on the metrics selected for the experiment.</p><p><a class=""external-link"" data-card-appearance=""inline"" href=""https://www.optimizely.com/optimization-glossary/multi-armed-bandit/"" rel=""nofollow"">https://www.optimizely.com/optimization-glossary/multi-armed-bandit/</a> </p><h2 id=""ABTestingWithOptimizely[Web]-Howaudiencesandrulesworkforfiltering"">How audiences and rules work for filtering</h2><p>Audience and delivery rules are evaluated in order from top to bottom.</p><p>Setting up audiences in Web is as easy as passing in the audience parameters into the Optimizely wrapper, see example below<br/><a class=""external-link"" href=""https://github.com/konciergeMD/web/blob/Dev/src/js/abTesting/components/ABTestProvider.tsx#L84"" rel=""nofollow"">https://github.com/konciergeMD/web/blob/Dev/src/js/abTesting/components/ABTestProvider.tsx#L84</a></p><div class=""code panel pdl conf-macro output-block"" data-hasbody=""true"" data-macro-id=""e4ac6821-2c94-4c73-b02f-0daa5c4cf3d6"" data-macro-name=""code"" style=""border-width: 1px;""><div class=""codeContent panelContent pdl"">
<pre class=""syntaxhighlighter-pre"" data-syntaxhighlighter-params=""brush: java; gutter: false; theme: Confluence"" data-theme=""Confluence"">    &lt;OptimizelyProvider
      optimizely={optimizely}
      user={{
        id: userId,
        attributes: {
          is_admin: Boolean(is_admin),
          app_variant: isEnterpriseUser ? AppVariants.AccoladeCare : variant,
          is_logged_in: userData.is_logged_in,
        },
      }}
    &gt;</pre>
</div></div><h2 id=""ABTestingWithOptimizely[Web]-LunchnLearnrecording"">Lunch n Learn recording</h2><p><a class=""external-link"" data-card-appearance=""inline"" href=""https://drive.google.com/file/d/17IFnWJqld51hg1919FsOp02MIkjGuBBk/view?usp=sharing"" rel=""nofollow"">https://drive.google.com/file/d/17IFnWJqld51hg1919FsOp02MIkjGuBBk/view?usp=sharing</a> </p><p></p>]"
"1635123365"," Data into OptimizelyThe approach we are using to forward data to Optimizely’s platform is to use Segment’s Destination Function https://segment.com/docs/connections/functions/destination-functions/ JavaScript Destination Function https://app.segment.com/plushcare/functions/catalog/dfn_63c85b6f0a236deb378c01e4 Python Destination Function https://app.segment.com/plushcare/functions/catalog/dfn_63c7001f66ae9b7ac724266e In this approach we are only forwarding anonymousID to Optimizely as the primary identifier for usersBenefits of using Segment’s Destination Function Event Delivery is always server-server and not subject to discrepancies with how Segment and Optimizely's pixels fire - we've seen this problem with other FE pixelsLimit amount of code we need to maintain in our codebase relating to Optimizely - the Destination Function allows us to avoid having to integrate Optimizely's SDK on the BELimit performance impact of triggering events via additional SDKs - currently our BE analytics implementation is synchronous, adding Optimizely's SDK directly in the code will force the events to fire synchronously which will add time to our API callsLean into Destination Functions for Optimizely Event management - allowing us to make changes without waiting for release cyclesWhenever adding an event to Optimizely we need to ensure it’s defined in Optimizely and it’s entity id mapped to Check the Events tab under the project you are hoping to add the event in If the event is there proceed to the next stepIf the event is not there define the Event in Optimizely using the same event name, copy the resulting event idCheck the Destination Function for your project to ensure the event is mapped for SegmentExampleIf the event name is mapped to an id than no work is neededIf not copy the event id from Optimizely into the Segment Destination Function and PublishData out of OptimizelyIn order to trigger Segment custom events for certain Optimizely actions utilize notification listenershttps://docs.developers.optimizely.com/full-stack/docs/notification-listeners Activate - Web - Optimizely Decision Notification Get Feature VariableGet all Feature VariablesGet VariationIs Feature Enabled","[<div class=""toc-macro client-side-toc-macro conf-macro output-block"" data-hasbody=""false"" data-headerelements=""H1,H2,H3,H4,H5,H6,H7"" data-layout=""default"" data-local-id=""0547dbac-6377-4f7b-9cee-96e07723d47c"" data-macro-id=""eb4b6b8e0b12482b8f5cbcd11ec0cb03"" data-macro-name=""toc""> </div><h2 id=""SegmentOptimizelyIntegration-DataintoOptimizely"">Data into Optimizely</h2><ul><li><p>The approach we are using to forward data to Optimizely’s platform is to use Segment’s Destination Function <a class=""external-link"" data-card-appearance=""inline"" href=""https://segment.com/docs/connections/functions/destination-functions/"" rel=""nofollow"">https://segment.com/docs/connections/functions/destination-functions/</a> </p><ul><li><p>JavaScript Destination Function <a class=""external-link"" data-card-appearance=""inline"" href=""https://app.segment.com/plushcare/functions/catalog/dfn_63c85b6f0a236deb378c01e4"" rel=""nofollow"">https://app.segment.com/plushcare/functions/catalog/dfn_63c85b6f0a236deb378c01e4</a> </p></li><li><p>Python Destination Function <a class=""external-link"" data-card-appearance=""inline"" href=""https://app.segment.com/plushcare/functions/catalog/dfn_63c7001f66ae9b7ac724266e"" rel=""nofollow"">https://app.segment.com/plushcare/functions/catalog/dfn_63c7001f66ae9b7ac724266e</a> </p></li></ul></li><li><p>In this approach we are only forwarding <code>anonymousID</code> to Optimizely as the primary identifier for users</p></li><li><p>Benefits of using Segment’s Destination Function </p><ul><li><p>Event Delivery is always server-server and not subject to discrepancies with how Segment and Optimizely's pixels fire - we've seen this problem with other FE pixels</p></li><li><p>Limit amount of code we need to maintain in our codebase relating to Optimizely - the Destination Function allows us to avoid having to integrate Optimizely's SDK on the BE</p></li><li><p>Limit performance impact of triggering events via additional SDKs - currently our BE analytics implementation is synchronous, adding Optimizely's SDK directly in the code will force the events to fire synchronously which will add time to our API calls</p></li><li><p>Lean into Destination Functions for Optimizely Event management - allowing us to make changes without waiting for release cycles</p></li></ul></li><li><p>Whenever adding an event to Optimizely we need to ensure it’s defined in Optimizely and it’s entity id mapped to </p><ul><li><p>Check the Events tab under the project you are hoping to add the event in </p><span class=""confluence-embedded-file-wrapper image-center-wrapper confluence-embedded-manual-size""><img class=""confluence-embedded-image image-center"" data-base-url=""https://accoladeinc.atlassian.net/wiki"" data-height=""616"" data-image-src=""https://accoladeinc.atlassian.net/wiki/download/attachments/1635123365/Screen%20Shot%202023-05-08%20at%201.16.41%20PM.png?version=1&amp;modificationDate=1683577006375&amp;cacheVersion=1&amp;api=v2"" data-linked-resource-container-id=""1635123365"" data-linked-resource-container-version=""4"" data-linked-resource-content-type=""image/png"" data-linked-resource-default-alias=""Screen Shot 2023-05-08 at 1.16.41 PM.png"" data-linked-resource-id=""1679032416"" data-linked-resource-type=""attachment"" data-linked-resource-version=""1"" data-media-id=""907f7dc0-f44a-41a1-9e9f-d41a7a0faa9a"" data-media-type=""file"" data-unresolved-comment-count=""0"" data-width=""1292"" loading=""lazy"" src=""https://accoladeinc.atlassian.net/wiki/download/thumbnails/1635123365/Screen%20Shot%202023-05-08%20at%201.16.41%20PM.png?version=1&amp;modificationDate=1683577006375&amp;cacheVersion=1&amp;api=v2&amp;width=638&amp;height=304"" srcset=""https://accoladeinc.atlassian.net/wiki/download/thumbnails/1635123365/Screen%20Shot%202023-05-08%20at%201.16.41%20PM.png?version=1&amp;modificationDate=1683577006375&amp;cacheVersion=1&amp;api=v2&amp;width=1276&amp;height=608 2x, https://accoladeinc.atlassian.net/wiki/download/thumbnails/1635123365/Screen%20Shot%202023-05-08%20at%201.16.41%20PM.png?version=1&amp;modificationDate=1683577006375&amp;cacheVersion=1&amp;api=v2&amp;width=638&amp;height=304 1x"" width=""638""/></span><ul><li><p>If the event is there proceed to the next step</p></li><li><p>If the event is not there define the Event in Optimizely using the same event name, copy the resulting event id</p></li></ul></li><li><p>Check the Destination Function for your project to ensure the event is mapped for Segment</p><ul><li><p>Example</p></li><li><span class=""confluence-embedded-file-wrapper image-center-wrapper""><img class=""confluence-embedded-image image-center"" data-base-url=""https://accoladeinc.atlassian.net/wiki"" data-height=""683"" data-image-src=""https://accoladeinc.atlassian.net/wiki/download/attachments/1635123365/Screen%20Shot%202023-05-08%20at%201.20.37%20PM.png?version=1&amp;modificationDate=1683577243525&amp;cacheVersion=1&amp;api=v2"" data-linked-resource-container-id=""1635123365"" data-linked-resource-container-version=""4"" data-linked-resource-content-type=""image/png"" data-linked-resource-default-alias=""Screen Shot 2023-05-08 at 1.20.37 PM.png"" data-linked-resource-id=""1678835795"" data-linked-resource-type=""attachment"" data-linked-resource-version=""1"" data-media-id=""6288e868-fc06-417c-b11c-b1e4f0980712"" data-media-type=""file"" data-unresolved-comment-count=""0"" data-width=""882"" loading=""lazy"" src=""https://accoladeinc.atlassian.net/wiki/download/attachments/1635123365/Screen%20Shot%202023-05-08%20at%201.20.37%20PM.png?version=1&amp;modificationDate=1683577243525&amp;cacheVersion=1&amp;api=v2""/></span><p>If the event name is mapped to an id than no work is needed</p></li><li><p>If not copy the event id from Optimizely into the Segment Destination Function and Publish</p></li></ul></li></ul></li></ul><h2 id=""SegmentOptimizelyIntegration-DataoutofOptimizely"">Data out of Optimizely</h2><ul><li><p>In order to trigger Segment custom events for certain Optimizely actions utilize notification listeners</p></li><li><p><a class=""external-link"" data-card-appearance=""inline"" href=""https://docs.developers.optimizely.com/full-stack/docs/notification-listeners"" rel=""nofollow"">https://docs.developers.optimizely.com/full-stack/docs/notification-listeners</a> </p><ul><li><p>Activate - <code>Web - Optimizely Decision Notification</code> </p></li><li><p>Get Feature Variable</p></li><li><p>Get all Feature Variables</p></li><li><p>Get Variation</p></li><li><p>Is Feature Enabled</p></li></ul></li></ul>]"
"1634239443","QA Rollout/Internal TestingAll features will only be exposed to user’s with the is_admin flag on Production - this will allow our internal QA team to test the feature on Production prior to doing a broader rolloutPercent RolloutOnce QA verfies that the feature works as expected on Production we will then do a percent rollout10, 25, 50, 75, 100The time between each increase will vary onSentry + Datadog Error dataCVR ImpactStatistical Significance of the test","[<p></p><h2 id=""RolloutStrategy-QARollout/InternalTesting"">QA Rollout/Internal Testing</h2><ul><li><p>All features will only be exposed to user’s with the is_admin flag on Production - this will allow our internal QA team to test the feature on Production prior to doing a broader rollout</p></li></ul><h2 id=""RolloutStrategy-PercentRollout"">Percent Rollout</h2><ul><li><p>Once QA verfies that the feature works as expected on Production we will then do a percent rollout</p></li><li><p>10, 25, 50, 75, 100</p><ul><li><p>The time between each increase will vary on</p><ul><li><p>Sentry + Datadog Error data</p></li><li><p>CVR Impact</p></li><li><p>Statistical Significance of the test</p></li></ul></li></ul></li></ul>]"
"1634566647"," When to use Optimizely for Feature FlaggingCurrently Optimizely is implemented on Web and iOS so as of 04/07/2023 those are the only platforms we can feature flag/rollout using Optimizely.
 


","[<div class=""toc-macro client-side-toc-macro conf-macro output-block"" data-hasbody=""false"" data-headerelements=""H1,H2,H3,H4,H5,H6,H7"" data-layout=""default"" data-local-id=""741692cc-2303-41d3-a9c5-b33bc828f71a"" data-macro-id=""5bfef69a-d466-414d-bec1-73987bd0801a"" data-macro-name=""toc""> </div><h2 id=""FeatureFlaggingBestPractices-WhentouseOptimizelyforFeatureFlagging"">When to use Optimizely for Feature Flagging</h2><p>Currently Optimizely is implemented on Web and iOS so as of 04/07/2023 those are the only platforms we can feature flag/rollout using Optimizely.</p><div class=""ap-container conf-macro output-block"" data-hasbody=""false"" data-layout=""default"" data-local-id=""8eb569ea-0648-4dcd-81a9-331e77fc1fcc"" data-macro-id=""b07f6ade-d1ae-4112-ab66-d26ed489ff7c"" data-macro-name=""lucidchart"" id=""ap-com.lucidchart.confluence.plugins.lucid-confluence__lucidchart4782050222016244290"">
<div class=""ap-content"" id=""embedded-com.lucidchart.confluence.plugins.lucid-confluence__lucidchart4782050222016244290""> </div>
<script class=""ap-iframe-body-script"" nonce=""$action.getNonce()"">//<![CDATA[

  (function(){
    var data = {
    ""addon_key"":""com.lucidchart.confluence.plugins.lucid-confluence"",
    ""uniqueKey"":""com.lucidchart.confluence.plugins.lucid-confluence__lucidchart4782050222016244290"",
    ""key"":""lucidchart"",
     ""moduleType"":""dynamicContentMacros"",      ""moduleLocation"":""content"",         ""cp"":""/wiki"",
            ""general"":"""",
    ""w"":"""",
    ""h"":"""",
    ""url"":""https://lucid.app/ac/confluence/viewer?documentId=b45f610a-e262-4ee5-bb07-fda4f989ad76&name=&macroId=14a70791-2722-4e51-944f-06d1552d6c2e&pages=&pageCount=1&type=rich&width=700&height=500&autoSize=1&align=left&p_id=1634566647&output_type=display&autoUpdate=false&documentToken=v2_d9d8566ab4faaa35b23b52635e4f68bc0d29277e7f231abadd384eb336a6ce75-a%3D10121%26c%3Dd8e88aa3-5ab3-3612-b7d6-c1c64d7f6d2c%26d%3Db45f610a-e262-4ee5-bb07-fda4f989ad76%26p%3D1634566647&id=&confluencePageId=1634566647&embedId=&installationId=&lucidAccountId=&lucidProduct=&alignment=&signature=&viewerType=&flags=&url=&xdm_e=https%3A%2F%2Faccoladeinc.atlassian.net&xdm_c=channel-com.lucidchart.confluence.plugins.lucid-confluence__lucidchart4782050222016244290&cp=%2Fwiki&xdm_deprecated_addon_key_do_not_use=com.lucidchart.confluence.plugins.lucid-confluence&lic=none&cv=1000.0.0-32a2c720d190&jwt=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiI2MTUyMDNjNmM3YmVhNDAwNjljZDMzZWIiLCJxc2giOiI5NjUwMTg4MmQzNDNiZDZlOGYxNTVkZTdjMTE5MWJkOWExZTE4MDk5NjBlNGRhYzcwYzMxNTVmMjkzYzc3OTk5IiwiaXNzIjoiZDhlODhhYTMtNWFiMy0zNjEyLWI3ZDYtYzFjNjRkN2Y2ZDJjIiwiY29udGV4dCI6e30sImV4cCI6MTcwNzk2MzgyNSwiaWF0IjoxNzA3OTYzNjQ1fQ.VCRIK7SH7zpefwhkj3xttqD_ylFG2styMbN_TUJfuIQ"",
     ""contextJwt"": ""eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiI2MTUyMDNjNmM3YmVhNDAwNjljZDMzZWIiLCJxc2giOiJjb250ZXh0LXFzaCIsImlzcyI6ImQ4ZTg4YWEzLTVhYjMtMzYxMi1iN2Q2LWMxYzY0ZDdmNmQyYyIsImNvbnRleHQiOnsiY29uZmx1ZW5jZSI6eyJlZGl0b3IiOnsidmVyc2lvbiI6IlwidjJcIiJ9LCJtYWNybyI6eyJvdXRwdXRUeXBlIjoiZGlzcGxheSIsImhhc2giOiJiMDdmNmFkZS1kMWFlLTQxMTItYWI2Ni1kMjZlZDQ4OWZmN2MiLCJpZCI6ImIwN2Y2YWRlLWQxYWUtNDExMi1hYjY2LWQyNmVkNDg5ZmY3YyJ9LCJjb250ZW50Ijp7InR5cGUiOiJwYWdlIiwidmVyc2lvbiI6IjQiLCJpZCI6IjE2MzQ1NjY2NDcifSwic3BhY2UiOnsia2V5IjoiRU5HSU5FRVJJTiIsImlkIjoiMTMxODU4NDMyOSJ9fX0sImV4cCI6MTcwNzk2NDU0NSwiaWF0IjoxNzA3OTYzNjQ1fQ.lIeU-sdMaa4I5Ip_RpbuKf_VThCWw2Yw1jjeQTIIqn8"",    ""structuredContext"": ""{\\""confluence\\"":{\\""editor\\"":{\\""version\\"":\\""\\\\\\""v2\\\\\\""\\""},\\""macro\\"":{\\""outputType\\"":\\""display\\"",\\""hash\\"":\\""b07f6ade-d1ae-4112-ab66-d26ed489ff7c\\"",\\""id\\"":\\""b07f6ade-d1ae-4112-ab66-d26ed489ff7c\\""},\\""content\\"":{\\""type\\"":\\""page\\"",\\""version\\"":\\""4\\"",\\""id\\"":\\""1634566647\\""},\\""space\\"":{\\""key\\"":\\""ENGINEERIN\\"",\\""id\\"":\\""1318584329\\""}}}"",
    ""contentClassifier"":""content"",
    ""productCtx"":""{\\""page.id\\"":\\""1634566647\\"",\\""macro.hash\\"":\\""b07f6ade-d1ae-4112-ab66-d26ed489ff7c\\"",\\""autoUpdate\\"":\\""false\\"",\\""page.type\\"":\\""page\\"",\\""macro.localId\\"":\\""8eb569ea-0648-4dcd-81a9-331e77fc1fcc\\"",\\"": = | RAW | = :\\"":\\""pageCount=1|autoUpdate=false|align=left|type=rich|autoSize=1|macroId=14a70791-2722-4e51-944f-06d1552d6c2e|pages=|instanceId=d8e88aa3-5ab3-3612-b7d6-c1c64d7f6d2c|width=700|documentId=b45f610a-e262-4ee5-bb07-fda4f989ad76|documentToken=v2_d9d8566ab4faaa35b23b52635e4f68bc0d29277e7f231abadd384eb336a6ce75-a=10121&c=d8e88aa3-5ab3-3612-b7d6-c1c64d7f6d2c&d=b45f610a-e262-4ee5-bb07-fda4f989ad76&p=1634566647|updated=1680813606477|height=500\\"",\\""space.id\\"":\\""1318584329\\"",\\""align\\"":\\""left\\"",\\""type\\"":\\""rich\\"",\\""autoSize\\"":\\""1\\"",\\""pages\\"":\\""\\"",\\""instanceId\\"":\\""d8e88aa3-5ab3-3612-b7d6-c1c64d7f6d2c\\"",\\""user.isExternalCollaborator\\"":\\""false\\"",\\""height\\"":\\""500\\"",\\""pageCount\\"":\\""1\\"",\\""space.key\\"":\\""ENGINEERIN\\"",\\""content.version\\"":\\""4\\"",\\""page.title\\"":\\""Feature Flagging Best Practices\\"",\\""macro.body\\"":\\""\\"",\\""macro.truncated\\"":\\""false\\"",\\""content.type\\"":\\""page\\"",\\""output.type\\"":\\""display\\"",\\""page.version\\"":\\""4\\"",\\""macroId\\"":\\""14a70791-2722-4e51-944f-06d1552d6c2e\\"",\\""content.id\\"":\\""1634566647\\"",\\""width\\"":\\""700\\"",\\""macro.id\\"":\\""b07f6ade-d1ae-4112-ab66-d26ed489ff7c\\"",\\""documentId\\"":\\""b45f610a-e262-4ee5-bb07-fda4f989ad76\\"",\\""documentToken\\"":\\""v2_d9d8566ab4faaa35b23b52635e4f68bc0d29277e7f231abadd384eb336a6ce75-a=10121&c=d8e88aa3-5ab3-3612-b7d6-c1c64d7f6d2c&d=b45f610a-e262-4ee5-bb07-fda4f989ad76&p=1634566647\\"",\\""updated\\"":\\""1680813606477\\"",\\""editor.version\\"":\\""\\\\\\""v2\\\\\\""\\""}"",
    ""timeZone"":""UTC"",
    ""origin"":""https://lucid.app"",
    ""hostOrigin"":""https://accoladeinc.atlassian.net"",
    ""sandbox"":""allow-downloads allow-forms allow-modals allow-popups allow-popups-to-escape-sandbox allow-scripts allow-same-origin allow-top-navigation-by-user-activation allow-storage-access-by-user-activation"",            ""apiMigrations"": {
        ""gdpr"": true
    }
}
;
    if(window.AP && window.AP.subCreate) {
      window._AP.appendConnectAddon(data);
    } else {
      require(['ac/create'], function(create){
        create.appendConnectAddon(data);
      });
    }

    // For Confluence App Analytics. This code works in conjunction with CFE's ConnectSupport.js.
    // Here, we add a listener to the initial HTML page that stores events if the ConnectSupport component
    // has not mounted yet. In CFE, we process the missed event data and disable this initial listener.
    const __MAX_EVENT_ARRAY_SIZE__ = 20;
    const connectAppAnalytics = ""ecosystem.confluence.connect.analytics"";
    window.connectHost && window.connectHost.onIframeEstablished((eventData) => {
      if (!window.__CONFLUENCE_CONNECT_SUPPORT_LOADED__) {
        let events = JSON.parse(window.localStorage.getItem(connectAppAnalytics)) || [];
        if (events.length >= __MAX_EVENT_ARRAY_SIZE__) {
          events.shift();
        }
        events.push(eventData);
        window.localStorage.setItem(connectAppAnalytics, JSON.stringify(events));
      }
    });

  }());

//]]>
</script>
</div>
<p></p>]"
"1713012798","Project SetupOpen Product Questions:Will we use the same project ID for Contentful and Patient Web?Is the Contentful Integration supported and recommended?Reason I question this is https://www.loom.com/share/0cd15ae75f71499a831923526f3cf792 Problems with Contentful integration Inability to share variant data w/ patient web appRequire setup of two Optimizely Destinations for Javascript sourceRequires legacy project setup - drawbacks currently unknownWill we use separate projects for iOS, Android and Web?Do we want to run experiments that span cross platform?What permissions must user consent to in order for us to initialize Optimizely? i.e. OneTrust/Cookie ConsentAcceptance Criteria:Create an Optimizely Full Stack Project with Dev, Stage and Production environments for Web Create an Optimizely Full Stack Project with Dev, Stage and Production environments for MobileSDK Initialization:Open Engineering Questions:Which of the JS SDKs will we use? https://docs.developers.optimizely.com/full-stack/docs/javascript-browser https://docs.developers.optimizely.com/full-stack/docs/javascript-node https://docs.developers.optimizely.com/full-stack/docs/javascript-react Where in Patient Web will we add the initialization?What polling interval should we specify?Open Product Questions:Do we need to initialize Optimizely on http://accoladecare.com ?Known Acceptance Criteria:Enable Debug logs in lower environments for QA PurposesSDK Usage:How where/ do we call the SDK to make a Decision/ Activate campaign for a user?How where/ do we manage User Context updates for the SDK?We will most likely need to implement an Optimizely Wrapper that calls our user API prior to reaching out to OptimizelyUser AliasingSegment Destination approach:For running experiments where user assignment takes place when they are authenticated Team would plan to pass Segment Anonymous ID into Optimizely's SDK User Context as userID based on this linkPlushCare forces Segment Anonymous ID into Optimizely’s userID for duration of the test According to this link in order to track events for Anonymous users in Optimizely's platform, we will need to force the Segment Anonymous ID into Optimizely's userID for duration of experiment/sessionAccording to this link, Optimizely will receive our Segment Identify event - which has our PlushCare user IDOur Segment conversion event (dispatched via a track call) sends both anonymousID and userID - we will need to create a Segment Destination Function that will override userID for Optimizely to ensure it NEVER gets the PlushCare User ID for the duration of the testQuestion here is since we're basing the flag decision on Segment's Anonymous ID will PlushCare's logged in userID skew reporting since we will be sending it via identify and track calls from Segment? Is there a way we can prioritize using anonymousID from a reporting perspective given that we are making the decision based on that identifier?Answer: Optimizely and Plushcare Technical Q&A Recording 9/30/2022 Passcode: A@JU@42$How long do Segment sessions last?How long do Mobile sessions last for anonymous id?Robust Aliasing:Create a lookup table that stores the first anonymous id used by a user when entering the siteCall a standalone service that exposes this table prior to interfacing with Optimizely’s decision and user context to ensure that the correct anonymous id Pros of Robust AliasingFull control over aliasing - we would be storing the identifiersExperiment assignment will go beyond the sessionIf we want to do Cross Device experiments this is the only way we can preserve assignmentsLonger term can potentially move targetting attributes hereCons of Robust AliasingImplementation cost - will add time to our implementation, infrastructure setup, build pipelines, tests etcMaintenance - service we will need to manage maintain, seperate repo, seperate buOptimizely is building this into their platform on this - launch date is unknown but we User TargetingTBD in order to size this work we need to know what experiments we want to run and what targeting we would like to do This will also determine how often we sync User Data to Optimizely and ultimately what the Optimizely Wrapper looks like - we need to do this on every client due to how the SDK worksWe will NOT be using the patients/user/retrieve API, instead introduce a new lightweight versioned endpoint that returns the minimal data needed for targetingAttributesTPAEnterpriseQA/TestingWe will be enabling Debug logs on all lower environments so can verify that the SDK loaded properly and is triggering actions properly https://docs.developers.optimizely.com/web/docs/troubleshooting We wil need to verify experiment/data flows into Segment properly from Optimizely and into Optimizely from Segment?iOS / Android logged in experiment use caseExampleIf the member experience team wants to A/B test a feature:Experiment details:Control: Show nothingVariant: Show a follow up appointment card on the dashboard after the user completes an appointmentTargeting: all usersEdge case:If the user exits the video appointment, closes the app, and doesn’t return for some time, we call analytics.reset and the next time the user logs in she may get bucketed into a different group.Analytics impact:The user could get bucketed into two groups and would be double counted.Example payloads:User X Session A {id: a9e2c70b-6854-4dfb-b2e7-390d518a3bb5traits: {}}User X Session B{id: 072ab033-7bf3-44e2-a270-c0f1f44d79b0traits: {}}","[<h2 id=""Optimizelyevaluation-ProjectSetup"">Project Setup</h2><p>Open Product Questions:</p><ul><li><p>Will we use the same project ID for Contentful and Patient Web?</p></li><li><p>Is the Contentful Integration supported and recommended?</p><ul><li><p>Reason I question this is <a class=""external-link"" data-card-appearance=""inline"" href=""https://www.loom.com/share/0cd15ae75f71499a831923526f3cf792"" rel=""nofollow"">https://www.loom.com/share/0cd15ae75f71499a831923526f3cf792</a> </p></li><li><p>Problems with Contentful integration </p><ul><li><p>Inability to share variant data w/ patient web app</p></li><li><p>Require setup of two Optimizely Destinations for Javascript source</p></li><li><p>Requires legacy project setup - drawbacks currently unknown</p></li></ul></li></ul></li><li><p>Will we use separate projects for iOS, Android and Web?</p><ul><li><p>Do we want to run experiments that span cross platform?</p></li></ul></li><li><p>What permissions must user consent to in order for us to initialize Optimizely? i.e. OneTrust/Cookie Consent</p></li></ul><p></p><p><strong>Acceptance Criteria:</strong></p><ul><li><p>Create an Optimizely Full Stack Project with Dev, Stage and Production environments for Web </p></li><li><p>Create an Optimizely Full Stack Project with Dev, Stage and Production environments for Mobile</p></li></ul><p></p><h2 id=""Optimizelyevaluation-SDKInitialization:"">SDK Initialization:</h2><p>Open Engineering Questions:</p><ul><li><p>Which of the JS SDKs will we use?</p><ul><li><p> <a class=""external-link"" data-card-appearance=""inline"" href=""https://docs.developers.optimizely.com/full-stack/docs/javascript-browser"" rel=""nofollow"">https://docs.developers.optimizely.com/full-stack/docs/javascript-browser</a> </p></li><li><p><a class=""external-link"" data-card-appearance=""inline"" href=""https://docs.developers.optimizely.com/full-stack/docs/javascript-node"" rel=""nofollow"">https://docs.developers.optimizely.com/full-stack/docs/javascript-node</a> </p></li><li><p><a class=""external-link"" data-card-appearance=""inline"" href=""https://docs.developers.optimizely.com/full-stack/docs/javascript-react"" rel=""nofollow"">https://docs.developers.optimizely.com/full-stack/docs/javascript-react</a> </p></li></ul></li><li><p>Where in Patient Web will we add the initialization?</p></li><li><p>What polling interval should we specify?</p></li></ul><p>Open Product Questions:</p><ul><li><p>Do we need to initialize Optimizely on <a class=""external-link"" data-card-appearance=""inline"" href=""http://accoladecare.com"" rel=""nofollow"">http://accoladecare.com</a> ?</p></li></ul><p></p><p>Known Acceptance Criteria:</p><ul><li><p>Enable Debug logs in lower environments for QA Purposes</p></li></ul><h2 id=""Optimizelyevaluation-SDKUsage:"">SDK Usage:</h2><ul><li><p>How where/ do we call the SDK to make a Decision/ Activate campaign for a user?</p></li><li><p>How where/ do we manage User Context updates for the SDK?</p><ul><li><p>We will most likely need to implement an Optimizely Wrapper that calls our user API prior to reaching out to Optimizely</p></li></ul></li></ul><h2 id=""Optimizelyevaluation-UserAliasing"">User Aliasing</h2><h3 id=""Optimizelyevaluation-SegmentDestinationapproach:"">Segment Destination approach:</h3><p>For running experiments where user assignment takes place when they are authenticated </p><ul><li><p>Team would plan to pass Segment Anonymous ID into Optimizely's SDK User Context as userID based on<a class=""external-link"" href=""https://docs.developers.optimizely.com/full-stack/v4.0/docs/create-user-context-javascript"" rel=""nofollow""> this link</a></p></li><li><p>PlushCare forces Segment Anonymous ID into Optimizely’s userID for duration of the test According to <a class=""external-link"" href=""https://segment.com/docs/connections/destinations/catalog/optimizely-web/#tracking-anonymous-data-with-optimizely-x-full-stack"" rel=""nofollow"">this link</a> in order to track events for Anonymous users in Optimizely's platform, we will need to force the Segment Anonymous ID into Optimizely's userID for duration of experiment/session</p></li><li><p>According to <a class=""external-link"" href=""https://segment.com/docs/connections/destinations/catalog/optimizely-web/#track"" rel=""nofollow"">this link</a>, Optimizely will receive our Segment Identify event - which has our PlushCare user ID</p></li><li><p>Our Segment conversion event (dispatched via a track call) sends both anonymousID and userID - we will need to create a Segment Destination Function that will override userID for Optimizely to ensure it <strong>NEVER </strong>gets the PlushCare User ID for the duration of the test</p></li></ul><p></p><p>Question here is since we're basing the flag decision on Segment's Anonymous ID will PlushCare's logged in userID skew reporting since we will be sending it via identify and track calls from Segment? </p><p>Is there a way we can prioritize using anonymousID from a reporting perspective given that we are making the decision based on that identifier?</p><p>Answer: <a class=""external-link"" href=""https://optimizely.zoom.us/rec/share/IQrGcRPnBk0gZWCo16cp9fXlLfpK3lonheZjPDvzejrjzzIAdRcogCfgKkubn968.gAjzxJVsk7g-jg_L"" rel=""nofollow"">Optimizely and Plushcare Technical Q&amp;A Recording 9/30/2022</a> Passcode: A@JU@42$</p><p></p><p>How long do Segment sessions last?</p><p>How long do Mobile sessions last for anonymous id?</p><h3 id=""Optimizelyevaluation-RobustAliasing:"">Robust Aliasing:</h3><ul><li><p>Create a lookup table that stores the first anonymous id used by a user when entering the site</p></li><li><p>Call a standalone service that exposes this table prior to interfacing with Optimizely’s decision and user context to ensure that the correct anonymous id </p></li></ul><p></p><p>Pros of Robust Aliasing</p><ul><li><p>Full control over aliasing - we would be storing the identifiers</p></li><li><p>Experiment assignment will go beyond the session</p></li><li><p>If we want to do Cross Device experiments this is the only way we can preserve assignments</p></li><li><p>Longer term can potentially move targetting attributes here</p></li></ul><p></p><p>Cons of Robust Aliasing</p><ul><li><p>Implementation cost - will add time to our implementation, infrastructure setup, build pipelines, tests etc</p></li><li><p>Maintenance - service we will need to manage maintain, seperate repo, seperate bu</p></li><li><p>Optimizely is building this into their platform on this - launch date is unknown but we </p></li></ul><h2 id=""Optimizelyevaluation-UserTargeting"">User Targeting</h2><ul><li><p>TBD in order to size this work we need to know what experiments we want to run and what targeting we would like to do </p><ul><li><p>This will also determine how often we sync User Data to Optimizely and ultimately what the Optimizely Wrapper looks like - we need to do this on every client due to how the SDK works</p></li></ul></li><li><p>We will <strong>NOT</strong> be using the patients/user/retrieve API, instead introduce a new lightweight versioned endpoint that returns the minimal data needed for targeting</p></li></ul><p></p><p>Attributes</p><ul><li><p>TPA</p></li><li><p>Enterprise</p></li></ul><p></p><h2 id=""Optimizelyevaluation-QA/Testing"">QA/Testing</h2><ul><li><p>We will be enabling Debug logs on all lower environments so can verify that the SDK loaded properly and is triggering actions properly <a class=""external-link"" data-card-appearance=""inline"" href=""https://docs.developers.optimizely.com/web/docs/troubleshooting"" rel=""nofollow"">https://docs.developers.optimizely.com/web/docs/troubleshooting</a> </p></li><li><p>We wil need to verify experiment/data flows into Segment properly from Optimizely and into Optimizely from Segment?</p></li></ul><p></p><h2 id=""Optimizelyevaluation-iOS/Androidloggedinexperimentusecase"">iOS / Android logged in experiment use case</h2><p><strong>Example</strong></p><p>If the member experience team wants to A/B test a feature:</p><ul><li><p>Experiment details:</p><ul><li><p>Control: Show nothing</p></li><li><p>Variant: Show a follow up appointment card on the dashboard after the user completes an appointment</p></li><li><p>Targeting: all users</p></li></ul></li><li><p>Edge case:</p><ul><li><p><span class=""inline-comment-marker"" data-ref=""90c61f6b-9730-4d0c-bcb0-8ca02d73fb2e"">If the user exits the video appointment, closes the app, and doesn’t return for some time, we call analytics.reset and the next time the user logs in she may get bucketed into a different group.</span></p></li></ul></li><li><p>Analytics impact:</p><ul><li><p>The user could get bucketed into two groups and would be double counted.</p></li></ul></li></ul><p></p><p>Example payloads:</p><p style=""margin-left: 30.0px;"">User X Session A </p><p></p><p style=""margin-left: 30.0px;"">{</p><p style=""margin-left: 30.0px;"">id: a9e2c70b-6854-4dfb-b2e7-390d518a3bb5</p><p style=""margin-left: 30.0px;"">traits: {</p><p></p><p style=""margin-left: 30.0px;"">}</p><p style=""margin-left: 30.0px;"">}</p><p></p><p></p><p></p><p style=""margin-left: 30.0px;"">User X Session B</p><p style=""margin-left: 30.0px;"">{</p><p style=""margin-left: 30.0px;"">id: 072ab033-7bf3-44e2-a270-c0f1f44d79b0</p><p style=""margin-left: 30.0px;"">traits: {</p><p></p><p style=""margin-left: 30.0px;"">}</p><p style=""margin-left: 30.0px;"">}</p><p></p>]"
"1802207377","App variant has been added to the users context when initializing Optimizely on FE. https://github.com/konciergeMD/web/pull/2414/filesOn Optimizely, we use this value to target different audiencesExample of configuration in Optimizely:","[<p>App variant has been added to the users context when initializing Optimizely on FE. <a class=""external-link"" href=""https://github.com/konciergeMD/web/pull/2414/files"" rel=""nofollow"">https://github.com/konciergeMD/web/pull/2414/files</a></p><p>On Optimizely, we use this value to target different audiences</p><span class=""confluence-embedded-file-wrapper image-center-wrapper""><img class=""confluence-embedded-image image-center"" data-base-url=""https://accoladeinc.atlassian.net/wiki"" data-height=""570"" data-image-src=""https://accoladeinc.atlassian.net/wiki/download/attachments/1802207377/Screenshot%202023-07-21%20at%202.02.39%20PM.png?version=1&amp;modificationDate=1690569027310&amp;cacheVersion=1&amp;api=v2"" data-linked-resource-container-id=""1802207377"" data-linked-resource-container-version=""1"" data-linked-resource-content-type=""image/png"" data-linked-resource-default-alias=""Screenshot 2023-07-21 at 2.02.39 PM.png"" data-linked-resource-id=""1802207390"" data-linked-resource-type=""attachment"" data-linked-resource-version=""1"" data-media-id=""49254467-a08d-4869-bf00-b436f30c2cbb"" data-media-type=""file"" data-unresolved-comment-count=""0"" data-width=""628"" loading=""lazy"" src=""https://accoladeinc.atlassian.net/wiki/download/attachments/1802207377/Screenshot%202023-07-21%20at%202.02.39%20PM.png?version=1&amp;modificationDate=1690569027310&amp;cacheVersion=1&amp;api=v2""/></span><p>Example of configuration in Optimizely:</p><span class=""confluence-embedded-file-wrapper image-center-wrapper""><img class=""confluence-embedded-image image-center"" data-base-url=""https://accoladeinc.atlassian.net/wiki"" data-height=""1040"" data-image-src=""https://accoladeinc.atlassian.net/wiki/download/attachments/1802207377/Screenshot%202023-07-21%20at%202.06.58%20PM.png?version=1&amp;modificationDate=1690569057964&amp;cacheVersion=1&amp;api=v2"" data-linked-resource-container-id=""1802207377"" data-linked-resource-container-version=""1"" data-linked-resource-content-type=""image/png"" data-linked-resource-default-alias=""Screenshot 2023-07-21 at 2.06.58 PM.png"" data-linked-resource-id=""1802207403"" data-linked-resource-type=""attachment"" data-linked-resource-version=""1"" data-media-id=""3feabc12-ece6-47f0-8eea-10bb5924b8e3"" data-media-type=""file"" data-unresolved-comment-count=""0"" data-width=""3334"" loading=""lazy"" src=""https://accoladeinc.atlassian.net/wiki/download/attachments/1802207377/Screenshot%202023-07-21%20at%202.06.58%20PM.png?version=1&amp;modificationDate=1690569057964&amp;cacheVersion=1&amp;api=v2""/></span><p></p>]"
"1936556364","IntroductionThis  page provides documentation for the integration of our plushcare-API back-end with Optimizely to enable feature flags in our application. The integration is designed to manage feature flags and control their activation based on user contexts. This page outlines the key components of the integration and provides code examples for using the Optimizely SDK. Official documentation for optimizely SDK can be found here: https://docs.developers.optimizely.com/full-stack-experimentation/docs/python-sdk  If you are implementing unit tests check this out: Back-end unit testing with optimizely flags Code OverviewThe integration consists of a Python class called OptimizelyClient responsible for managing the Optimizely SDK, creating user contexts, and retrieving feature flags and their associated variables. Let's take a closer look at the key methods and functionalities within the code:Class: OptimizelyClientInitializationThe OptimizelyClient class handles the initialization of the Optimizely SDK and sets up the configuration manager. The SDK is initialized using the provided sdk_key, and exceptions are caught and logged using the send_exception_to_datadog function. It will also instantiate an OptimizelyClient object called optimizely_cli. Currently the OptimizelyClient fetches a data file from cdn.optimizely.com, this is currently using a default polling interval of 5 minutes - the SDK is responsible for reaching out to the CDN and fetching the updated file at this interval, the SDK then fetches flags against this data file. We will be setting a custom interval at some point but the current latency can be seen in Optimizely CDN APM Fetching and updating optimizely clientWhen optimizely_cli object is initialized, we use an argument called update_interval to establish how much time to wait until the next OptimizelyClient update. The value can be defined in our settings.py file, using the variable OPTIMIZELY_UPDATE_INTERVAL, which is set to 60 seconds by defaultMethod: create_user_contextThis method creates a user context within Optimizely. It can be used to associate specific users with feature flags.Method: get_enabled_flagsReturns a list of enabled feature flags for a given user. If a user is not specified, it retrieves flags for a generic user.Method: get_flagRetrieves the Optimizely decision object for a specific user and feature flag. This decision object provides information about whether the flag is enabled or not. To check if a feature flag is enabled, use optimizely_client.get_flag(""new_feature_flag"", user_profile).enabled.Method: get_flag_variablesReturns the variables associated with a specific feature flag for a user.Method: get_flag_for_idRetrieves a feature flag for a specific ID, not tied to a user context.Code UsageHere are some examples of how to use the OptimizelyClient class to work with feature flags in your Django application:Importing the optimizely_cliThe client is initialized when the django session starts, instantiating an object called optimizely_cli. The object can be imported using the line
from plushcareAPI.clients.optimizely.client import optimizely_cli
Getting Enabled Flags
enabled_flags = optimizely_cli.get_enabled_flags(user_profile)
Getting a Flag Decision
flag_decision = optimizely_cli.get_flag(""new_feature_flag"", user_profile)
if flag_decision.enabled:
    # Feature flag is enabled, implement the feature logic here
else:
    # Feature flag is not enabled, implement the default behavior
Getting Flag Variables
flag_decision = optimizely_cli.get_flag(""new_feature_flag"", user_profile)
if flag_decision.enabled:
    flag_variables = flag_decision.variables # Returns a dict with variable values
Getting a Flag for a Specific ID
is_flag_enabled = optimizely_cli.get_flag_for_id(""new_feature_flag"", ""456"")
These code examples demonstrate how to use the Optimizely integration to work with feature flags in your application. Make sure to check the enabled property of the OptimizelyDecision object to determine whether a feature flag is enabled. No user, no worriesIf a user is not going to be bucketed into an experiment, you don't need to pass the user as a parameter. The OptimizelyClient class automatically uses a generic user context when no UserProfile is provided as an argument.Creating or Getting a User Context from Optimizely
user_profile = UserProfile.objects.get(id=<user_id>)
user_context = optimizely_cli.create_user_context(user_profile)
Adding Flags to Optimizely and Back-end IntegrationFeature flags, or feature toggles, are a powerful tool in software development that allows you to control the behavior of your application without needing to release new code. Optimizely simplifies the process of managing and utilizing feature flags in your application. Here's a step-by-step guide to adding flags to Optimizely and integrating them into your back-end:Step 1: Define Feature Flags in OptimizelyWithin the Optimizely interface, define the feature flags that you want to control. Feature flags are identified by unique keys, such as ""shopping_cart"" or ""price_filter."" These flags represent the features or functionality you wish to manage. They will be created disabled in Dev, Stage and Production. Step 2: Configure Feature FlagsConfigure the feature flags you've defined in Optimizely. This includes setting default values, targeting rules, and associating variables or variations with each flag. Variables and variations allow you to customize how the flags behave.Variables: Variables are additional settings that influence feature behavior. For instance, a variable could represent the chosen machine learning model or any parameter you want to adjust without code changes. Variables can be boolean, string, integer, double or JSON.Variations: Variations define the different states a feature flag can be in. You can use the default 'On' and 'Off' variations or more complex variations for your created variables.Default value and rules: For each environment set the default value and if necessary rules for user-based variations. Step 3: Enable Feature Flag (and rules)Every feature flag can be enabled/disabled for each environment separately. Also 'Targeted Delivery' or A/B Test rules must be also enabled.Step 4: Use Flags in Backend CodeIn your back-end code, utilize the Optimizely client to make decisions based on the state of feature flags. You can check if a flag is enabled, retrieve variables, and create user contexts for personalized decisions.
from plushcareAPI.clients.optimizely.client import optimizely_cli

# Check if a feature flag is enabled
if optimizely_cli.get_flag(""shopping_cart"", user_profile).enabled:
    # Implement shopping cart feature logic
else:
    # Implement default behavior

# Retrieve variable values
ml_model = optimizely_cli.get_flag(""price_filter"", user_profile).variables.get(""ml_model"", ""default_model"")
Step 5: Experiment and MonitorTake advantage of Optimizely's experimentation features to perform A/B testing and controlled feature rollouts. Experimentation allows you to make data-driven decisions and fine-tune feature behavior.Real-World Example: Replacing Constance Feature Flags with OptimizelyIn our API, we recently transitioned from using Constance feature flags (ML_COST_ESTIMATE, ML_COST_ESTIMATE_OVERRIDE, and ML_COST_ESTIMATE_MODEL_CHOICE) to Optimizely feature flags (ml_cost_estimate and ml_cost_estimate_override). This transition not only improved the efficiency of managing feature flags but also allowed us to leverage Optimizely's capabilities for dynamic control and experimentation. Also, as a main improvement we are now capable of detecting when a change was made on the rule and by who. BackgroundBefore the transition, our application relied on Constance for feature flag management. This approach required updates to the admin constance panel, for each environment, and sometimes changes to the  settings.py file, forcing new PR’s and deploys, which often led to delays in experimentation and feature rollout. Using Optimizely FlagsFor the feature flag ML_COST_ESTIMATE_OVERRIDE, which governs whether the pricing will utilize machine learning-based pricing, we created a corresponding Optimizely flag called ml_cost_estimate_override. This flag features two default variations: 'On' and 'Off,' which correspond to 'True' and 'False,' respectively.To replace the functionality of both ML_COST_ESTIMATE and ML_COST_ESTIMATE_MODEL_CHOICE, we made the decision to create a single flag named ML_COST_ESTIMATE within Optimizely. Inside this flag, we added a string variable known as ML_MODEL. To account for the various possible values for this variable, we added them as Variations within the ML_COST_ESTIMATE flag.When the ml_cost_estimate feature flag assumes a value other than 'off,' the .enabled method will return True. Additionally, it's possible to retrieve the ml_model variable by using the variables method.Before the Transition (Constance Flags)
from constance import config

if config.ML_COST_ESTIMATE:
    # Implement ML cost estimation logic
    ml_model_choice = config.ML_COST_ESTIMATE_MODEL_CHOICE
else:
    # Implement default behavior

from constance import config

if config.ML_COST_ESTIMATE_OVERRIDE:
    # Implement ML cost estimation override logic
else:
    # Implement default behavior
After the Transition (Optimizely Flags)
from plushcareAPI.clients.optimizely.client import optimizely_cli

# Retrieve the Optimizely decision for the ml_cost_estimate flag
ml_cost_estimate_decision = optimizely_cli.get_flag(""ml_cost_estimate"", user_profile)

if ml_cost_estimate_decision.enabled:
    # Implement ML cost estimation logic
    ml_model = ml_cost_estimate_decision.variables.get(""ml_model"")
    # ml_model now contains the chosen ML model
else:
    # Implement default behavior
Benefits of the TransitionThe transition to Optimizely flags has provided several benefits to our development process:Real-time Control: With Optimizely, we can make feature flag changes in real-time without requiring code deployments or database updates.Traceability: Everything gets recorded on Optimizely panel app.Experimentation: Optimizely's experimentation features allow us to perform A/B testing and safely introduce new features to a subset of users.User Context: Optimizely allows us to create user contexts and personalize feature flag decisions for different user segments.This real-world example demonstrates how we successfully integrated Optimizely flags into our API to replace the Constance feature flags, resulting in improved efficiency and greater control over feature flag management.","[<h2 id=""OptimizelyBackendIntegrationforfeatureflags-Introduction"">Introduction</h2><p>This  page provides documentation for the integration of our plushcare-API back-end with Optimizely to enable feature flags in our application. The integration is designed to manage feature flags and control their activation based on user contexts. This page outlines the key components of the integration and provides code examples for using the Optimizely SDK.</p><div class=""confluence-information-macro confluence-information-macro-information conf-macro output-block"" data-hasbody=""true"" data-macro-id=""069fb773-2df7-4d18-8c04-53f2c8a6f6e9"" data-macro-name=""info""><span class=""aui-icon aui-icon-small aui-iconfont-info confluence-information-macro-icon""> </span><div class=""confluence-information-macro-body""><p>Official documentation for optimizely SDK can be found here: <a class=""external-link"" data-card-appearance=""inline"" href=""https://docs.developers.optimizely.com/full-stack-experimentation/docs/python-sdk"" rel=""nofollow"">https://docs.developers.optimizely.com/full-stack-experimentation/docs/python-sdk</a> </p></div></div><div class=""confluence-information-macro confluence-information-macro-information conf-macro output-block"" data-hasbody=""true"" data-macro-id=""d08229b7-8411-4417-b049-c394063a0e0a"" data-macro-name=""info""><span class=""aui-icon aui-icon-small aui-iconfont-info confluence-information-macro-icon""> </span><div class=""confluence-information-macro-body""><p>If you are implementing unit tests check this out: <a data-linked-resource-id=""1965883579"" data-linked-resource-type=""page"" data-linked-resource-version=""10"" href=""/wiki/spaces/ENGINEERIN/pages/1965883579/Back-end+unit+testing+with+optimizely+flags"">Back-end unit testing with optimizely flags</a> </p></div></div><h2 id=""OptimizelyBackendIntegrationforfeatureflags-CodeOverview"">Code Overview</h2><p>The integration consists of a Python class called <code>OptimizelyClient</code> responsible for managing the Optimizely SDK, creating user contexts, and retrieving feature flags and their associated variables. Let's take a closer look at the key methods and functionalities within the code:</p><h3 id=""OptimizelyBackendIntegrationforfeatureflags-Class:OptimizelyClient"">Class: <strong>OptimizelyClient</strong></h3><h4 id=""OptimizelyBackendIntegrationforfeatureflags-Initialization"">Initialization</h4><p>The <code>OptimizelyClient</code> class handles the initialization of the Optimizely SDK and sets up the configuration manager. The SDK is initialized using the provided <code>sdk_key</code>, and exceptions are caught and logged using the <code>send_exception_to_datadog</code> function. It will also instantiate an OptimizelyClient object called optimizely_cli. </p><p>Currently the <code>OptimizelyClient</code> fetches a data file from <a class=""external-link"" href=""http://cdn.optimizely.com"" rel=""nofollow"">cdn.optimizely.com</a>, this is currently using a default polling interval of 5 minutes - the SDK is responsible for reaching out to the CDN and fetching the updated file at this interval, the SDK then fetches flags against this data file. We will be setting a custom interval at some point but the current latency can be seen in <a class=""external-link"" href=""https://app.datadoghq.com/apm/resource/cdn.optimizely.com/requests.request/51a06c74b45cfb55?query=env%3Aprod%20service%3Acdn.optimizely.com%20operation_name%3Arequests.request%20resource_name%3Arequests.request&amp;env=prod&amp;fullscreen_end_ts=1698946445060&amp;fullscreen_paused=true&amp;fullscreen_refresh_mode=paused&amp;fullscreen_start_ts=1696354445060&amp;topGraphs=latency%3Alatency%2Chits%3Aversion_count%2Cerrors%3Aversion_count%2CbreakdownAs%3Apercentage&amp;traces=qson%3A%28data%3A%28%29%2Cversion%3A%210%29&amp;start=1696354445060&amp;end=1698946445060&amp;paused=true"" rel=""nofollow"">Optimizely CDN APM</a></p><div class=""confluence-information-macro confluence-information-macro-information conf-macro output-block"" data-hasbody=""true"" data-macro-id=""96c4b676-f925-4b05-9b9e-9e9a6e3a0f36"" data-macro-name=""info""><span class=""aui-icon aui-icon-small aui-iconfont-info confluence-information-macro-icon""> </span><div class=""confluence-information-macro-body""><p>Fetching and updating optimizely client</p><p>When optimizely_cli object is initialized, we use an argument called update_interval to establish how much time to wait until the next OptimizelyClient update. The value can be defined in our settings.py file, using the variable <code>OPTIMIZELY_UPDATE_INTERVAL</code>, which is set to 60 seconds by default</p></div></div><h4 id=""OptimizelyBackendIntegrationforfeatureflags-Method:create_user_context"">Method: <code>create_user_context</code></h4><p>This method creates a user context within Optimizely. It can be used to associate specific users with feature flags.</p><h4 id=""OptimizelyBackendIntegrationforfeatureflags-Method:get_enabled_flags"">Method: <code>get_enabled_flags</code></h4><p>Returns a list of enabled feature flags for a given user. If a user is not specified, it retrieves flags for a generic user.</p><h4 id=""OptimizelyBackendIntegrationforfeatureflags-Method:get_flag"">Method: <code>get_flag</code></h4><p>Retrieves the Optimizely decision object for a specific user and feature flag. This decision object provides information about whether the flag is enabled or not. To check if a feature flag is enabled, use <code>optimizely_client.get_flag(""new_feature_flag"", user_profile).enabled</code>.</p><h4 id=""OptimizelyBackendIntegrationforfeatureflags-Method:get_flag_variables"">Method: <code>get_flag_variables</code></h4><p>Returns the variables associated with a specific feature flag for a user.</p><h4 id=""OptimizelyBackendIntegrationforfeatureflags-Method:get_flag_for_id"">Method: <code>get_flag_for_id</code></h4><p>Retrieves a feature flag for a specific ID, not tied to a user context.</p><h2 id=""OptimizelyBackendIntegrationforfeatureflags-CodeUsage"">Code Usage</h2><p>Here are some examples of how to use the <code>OptimizelyClient</code> class to work with feature flags in your Django application:</p><h3 id=""OptimizelyBackendIntegrationforfeatureflags-Importingtheoptimizely_cli"">Importing the optimizely_cli</h3><p>The client is initialized when the django session starts, instantiating an object called <code>optimizely_cli</code>. The object can be imported using the line</p><div class=""code panel pdl conf-macro output-block"" data-hasbody=""true"" data-macro-id=""a16e9ec9-1fc5-4085-b671-2d1c0ab00ff1"" data-macro-name=""code"" style=""border-width: 1px;""><div class=""codeContent panelContent pdl"">
<pre class=""syntaxhighlighter-pre"" data-syntaxhighlighter-params=""brush: java; gutter: false; theme: Confluence"" data-theme=""Confluence"">from plushcareAPI.clients.optimizely.client import optimizely_cli</pre>
</div></div><h3 id=""OptimizelyBackendIntegrationforfeatureflags-GettingEnabledFlags"">Getting Enabled Flags</h3><div class=""code panel pdl conf-macro output-block"" data-hasbody=""true"" data-macro-id=""e51a1294-bb53-49a5-af26-a3814571c987"" data-macro-name=""code"" style=""border-width: 1px;""><div class=""codeContent panelContent pdl"">
<pre class=""syntaxhighlighter-pre"" data-syntaxhighlighter-params=""brush: java; gutter: false; theme: Confluence"" data-theme=""Confluence"">enabled_flags = optimizely_cli.get_enabled_flags(user_profile)</pre>
</div></div><h3 id=""OptimizelyBackendIntegrationforfeatureflags-GettingaFlagDecision"">Getting a Flag Decision</h3><div class=""code panel pdl conf-macro output-block"" data-hasbody=""true"" data-macro-id=""7a3e852d-bfc5-421a-b18a-dcf8f9fcefc3"" data-macro-name=""code"" style=""border-width: 1px;""><div class=""codeContent panelContent pdl"">
<pre class=""syntaxhighlighter-pre"" data-syntaxhighlighter-params=""brush: java; gutter: false; theme: Confluence"" data-theme=""Confluence"">flag_decision = optimizely_cli.get_flag(""new_feature_flag"", user_profile)
if flag_decision.enabled:
    # Feature flag is enabled, implement the feature logic here
else:
    # Feature flag is not enabled, implement the default behavior</pre>
</div></div><h3 id=""OptimizelyBackendIntegrationforfeatureflags-GettingFlagVariables"">Getting Flag Variables</h3><div class=""code panel pdl conf-macro output-block"" data-hasbody=""true"" data-macro-id=""0c6771a9-394e-4ae0-9ef1-2d05377cabeb"" data-macro-name=""code"" style=""border-width: 1px;""><div class=""codeContent panelContent pdl"">
<pre class=""syntaxhighlighter-pre"" data-syntaxhighlighter-params=""brush: java; gutter: false; theme: Confluence"" data-theme=""Confluence"">flag_decision = optimizely_cli.get_flag(""new_feature_flag"", user_profile)
if flag_decision.enabled:
    flag_variables = flag_decision.variables # Returns a dict with variable values</pre>
</div></div><h3 id=""OptimizelyBackendIntegrationforfeatureflags-GettingaFlagforaSpecificID"">Getting a Flag for a Specific ID</h3><div class=""code panel pdl conf-macro output-block"" data-hasbody=""true"" data-macro-id=""1ca3a589-64f5-48bc-b34b-ff5a42c6bdb0"" data-macro-name=""code"" style=""border-width: 1px;""><div class=""codeContent panelContent pdl"">
<pre class=""syntaxhighlighter-pre"" data-syntaxhighlighter-params=""brush: java; gutter: false; theme: Confluence"" data-theme=""Confluence"">is_flag_enabled = optimizely_cli.get_flag_for_id(""new_feature_flag"", ""456"")</pre>
</div></div><p>These code examples demonstrate how to use the Optimizely integration to work with feature flags in your application. Make sure to check the <code>enabled</code> property of the <code>OptimizelyDecision</code> object to determine whether a feature flag is enabled.</p><div class=""confluence-information-macro confluence-information-macro-information conf-macro output-block"" data-hasbody=""true"" data-macro-id=""776ea2fc-c62f-47b2-9e91-3a40986ffc67"" data-macro-name=""info""><span class=""aui-icon aui-icon-small aui-iconfont-info confluence-information-macro-icon""> </span><div class=""confluence-information-macro-body""><p><em>No user, no worries</em></p><p>If a user is not going to be bucketed into an experiment, you don't need to pass the user as a parameter. The <code>OptimizelyClient</code> class automatically uses a generic user context when no <code>UserProfile</code> is provided as an argument.</p></div></div><h3 id=""OptimizelyBackendIntegrationforfeatureflags-CreatingorGettingaUserContextfromOptimizely"">Creating or Getting a User Context from Optimizely</h3><div class=""code panel pdl conf-macro output-block"" data-hasbody=""true"" data-macro-id=""3a5170d3-5c5e-4487-9020-d3519774d854"" data-macro-name=""code"" style=""border-width: 1px;""><div class=""codeContent panelContent pdl"">
<pre class=""syntaxhighlighter-pre"" data-syntaxhighlighter-params=""brush: java; gutter: false; theme: Confluence"" data-theme=""Confluence"">user_profile = UserProfile.objects.get(id=&lt;user_id&gt;)
user_context = optimizely_cli.create_user_context(user_profile)</pre>
</div></div><h2 id=""OptimizelyBackendIntegrationforfeatureflags-AddingFlagstoOptimizelyandBack-endIntegration"">Adding Flags to Optimizely and Back-end Integration</h2><p>Feature flags, or feature toggles, are a powerful tool in software development that allows you to control the behavior of your application without needing to release new code. Optimizely simplifies the process of managing and utilizing feature flags in your application. Here's a step-by-step guide to adding flags to Optimizely and integrating them into your back-end:</p><h3 id=""OptimizelyBackendIntegrationforfeatureflags-Step1:DefineFeatureFlagsinOptimizely"">Step 1: Define Feature Flags in Optimizely</h3><p>Within the Optimizely interface, define the feature flags that you want to control. Feature flags are identified by unique keys, such as ""shopping_cart"" or ""price_filter."" These flags represent the features or functionality you wish to manage. They will be created disabled in Dev, Stage and Production. </p><h3 id=""OptimizelyBackendIntegrationforfeatureflags-Step2:ConfigureFeatureFlags"">Step 2: Configure Feature Flags</h3><p>Configure the feature flags you've defined in Optimizely. This includes setting default values, targeting rules, and associating variables or variations with each flag. Variables and variations allow you to customize how the flags behave.</p><ol start=""1""><li><p><strong>Variables</strong>: Variables are additional settings that influence feature behavior. For instance, a variable could represent the chosen machine learning model or any parameter you want to adjust without code changes. Variables can be boolean, string, integer, double or JSON.</p></li><li><p><strong>Variations</strong>: Variations define the different states a feature flag can be in. You can use the default 'On' and 'Off' variations or more complex variations for your created variables.</p></li><li><p><strong>Default value and rules: </strong>For each environment set the default value and if necessary rules for user-based variations. </p><span class=""confluence-embedded-file-wrapper image-center-wrapper confluence-embedded-manual-size""><img class=""confluence-embedded-image image-center"" data-base-url=""https://accoladeinc.atlassian.net/wiki"" data-height=""415"" data-image-src=""https://accoladeinc.atlassian.net/wiki/download/attachments/1936556364/image-20231102-133719.png?version=1&amp;modificationDate=1698932243030&amp;cacheVersion=1&amp;api=v2"" data-linked-resource-container-id=""1936556364"" data-linked-resource-container-version=""27"" data-linked-resource-content-type=""image/png"" data-linked-resource-default-alias=""image-20231102-133719.png"" data-linked-resource-id=""1937244316"" data-linked-resource-type=""attachment"" data-linked-resource-version=""1"" data-media-id=""17f7c328-6b85-4c8a-bad5-9228a626fac1"" data-media-type=""file"" data-unresolved-comment-count=""0"" data-width=""648"" loading=""lazy"" src=""https://accoladeinc.atlassian.net/wiki/download/thumbnails/1936556364/image-20231102-133719.png?version=1&amp;modificationDate=1698932243030&amp;cacheVersion=1&amp;api=v2&amp;width=648&amp;height=415"" srcset=""https://accoladeinc.atlassian.net/wiki/download/thumbnails/1936556364/image-20231102-133719.png?version=1&amp;modificationDate=1698932243030&amp;cacheVersion=1&amp;api=v2&amp;width=648&amp;height=415 2x, https://accoladeinc.atlassian.net/wiki/download/thumbnails/1936556364/image-20231102-133719.png?version=1&amp;modificationDate=1698932243030&amp;cacheVersion=1&amp;api=v2&amp;width=648&amp;height=415 1x"" width=""648""/></span></li></ol><h3 id=""OptimizelyBackendIntegrationforfeatureflags-Step3:EnableFeatureFlag(andrules)"">Step 3: Enable Feature Flag (and rules)</h3><p>Every feature flag can be enabled/disabled for each environment separately. Also 'Targeted Delivery' or A/B Test rules must be also enabled.</p><span class=""confluence-embedded-file-wrapper image-center-wrapper confluence-embedded-manual-size""><img class=""confluence-embedded-image image-center"" data-base-url=""https://accoladeinc.atlassian.net/wiki"" data-height=""311"" data-image-src=""https://accoladeinc.atlassian.net/wiki/download/attachments/1936556364/image-20231102-123912.png?version=1&amp;modificationDate=1698928756994&amp;cacheVersion=1&amp;api=v2"" data-linked-resource-container-id=""1936556364"" data-linked-resource-container-version=""27"" data-linked-resource-content-type=""image/png"" data-linked-resource-default-alias=""image-20231102-123912.png"" data-linked-resource-id=""1937244282"" data-linked-resource-type=""attachment"" data-linked-resource-version=""1"" data-media-id=""726160e3-1c76-4edb-a25a-5e961019081d"" data-media-type=""file"" data-unresolved-comment-count=""0"" data-width=""705"" loading=""lazy"" src=""https://accoladeinc.atlassian.net/wiki/download/thumbnails/1936556364/image-20231102-123912.png?version=1&amp;modificationDate=1698928756994&amp;cacheVersion=1&amp;api=v2&amp;width=561&amp;height=247"" srcset=""https://accoladeinc.atlassian.net/wiki/download/thumbnails/1936556364/image-20231102-123912.png?version=1&amp;modificationDate=1698928756994&amp;cacheVersion=1&amp;api=v2&amp;width=705&amp;height=311 2x, https://accoladeinc.atlassian.net/wiki/download/thumbnails/1936556364/image-20231102-123912.png?version=1&amp;modificationDate=1698928756994&amp;cacheVersion=1&amp;api=v2&amp;width=561&amp;height=247 1x"" width=""561""/></span><h3 id=""OptimizelyBackendIntegrationforfeatureflags-Step4:UseFlagsinBackendCode"">Step 4: Use Flags in Backend Code</h3><p>In your back-end code, utilize the Optimizely client to make decisions based on the state of feature flags. You can check if a flag is enabled, retrieve variables, and create user contexts for personalized decisions.</p><div class=""code panel pdl conf-macro output-block"" data-hasbody=""true"" data-macro-id=""6c1b141d-15f9-4988-ad40-812270cd94b6"" data-macro-name=""code"" style=""border-width: 1px;""><div class=""codeContent panelContent pdl"">
<pre class=""syntaxhighlighter-pre"" data-syntaxhighlighter-params=""brush: java; gutter: false; theme: Confluence"" data-theme=""Confluence"">from plushcareAPI.clients.optimizely.client import optimizely_cli

# Check if a feature flag is enabled
if optimizely_cli.get_flag(""shopping_cart"", user_profile).enabled:
    # Implement shopping cart feature logic
else:
    # Implement default behavior

# Retrieve variable values
ml_model = optimizely_cli.get_flag(""price_filter"", user_profile).variables.get(""ml_model"", ""default_model"")</pre>
</div></div><h3 id=""OptimizelyBackendIntegrationforfeatureflags-Step5:ExperimentandMonitor"">Step 5: Experiment and Monitor</h3><p>Take advantage of Optimizely's experimentation features to perform A/B testing and controlled feature rollouts. Experimentation allows you to make data-driven decisions and fine-tune feature behavior.</p><h2 id=""OptimizelyBackendIntegrationforfeatureflags-Real-WorldExample:ReplacingConstanceFeatureFlagswithOptimizely"">Real-World Example: Replacing Constance Feature Flags with Optimizely</h2><p>In our API, we recently transitioned from using Constance feature flags (<code>ML_COST_ESTIMATE</code>, <code>ML_COST_ESTIMATE_OVERRIDE</code>, and <code>ML_COST_ESTIMATE_MODEL_CHOICE</code>) to Optimizely feature flags (<code>ml_cost_estimate</code> and <code>ml_cost_estimate_override</code>). This transition not only improved the efficiency of managing feature flags but also allowed us to leverage Optimizely's capabilities for dynamic control and experimentation. Also, as a main improvement we are now capable of detecting when a change was made on the rule and by who. </p><h3 id=""OptimizelyBackendIntegrationforfeatureflags-Background"">Background</h3><p>Before the transition, our application relied on Constance for feature flag management. This approach required updates to the admin constance panel, for each environment, and sometimes changes to the  <code>settings.py</code> file, forcing new PR’s and deploys, which often led to delays in experimentation and feature rollout. </p><h3 id=""OptimizelyBackendIntegrationforfeatureflags-UsingOptimizelyFlags"">Using Optimizely Flags</h3><p>For the feature flag <code>ML_COST_ESTIMATE_OVERRIDE</code>, which governs whether the pricing will utilize machine learning-based pricing, we created a corresponding Optimizely flag called <code>ml_cost_estimate_override</code>. This flag features two default variations: 'On' and 'Off,' which correspond to 'True' and 'False,' respectively.</p><p>To replace the functionality of both <code>ML_COST_ESTIMATE</code> and <code>ML_COST_ESTIMATE_MODEL_CHOICE</code>, we made the decision to create a single flag named <code>ML_COST_ESTIMATE</code> within Optimizely. Inside this flag, we added a string variable known as <code>ML_MODEL</code>. To account for the various possible values for this variable, we added them as Variations within the <code>ML_COST_ESTIMATE</code> flag.</p><span class=""confluence-embedded-file-wrapper image-center-wrapper confluence-embedded-manual-size""><img class=""confluence-embedded-image image-center"" data-base-url=""https://accoladeinc.atlassian.net/wiki"" data-height=""688"" data-image-src=""https://accoladeinc.atlassian.net/wiki/download/attachments/1936556364/variations.png?version=1&amp;modificationDate=1698927165936&amp;cacheVersion=1&amp;api=v2"" data-linked-resource-container-id=""1936556364"" data-linked-resource-container-version=""27"" data-linked-resource-content-type=""image/png"" data-linked-resource-default-alias=""variations.png"" data-linked-resource-id=""1937342539"" data-linked-resource-type=""attachment"" data-linked-resource-version=""1"" data-media-id=""e4cc05e6-1e3d-471a-9a6c-4fe447e501a5"" data-media-type=""file"" data-unresolved-comment-count=""0"" data-width=""1282"" loading=""lazy"" src=""https://accoladeinc.atlassian.net/wiki/download/thumbnails/1936556364/variations.png?version=1&amp;modificationDate=1698927165936&amp;cacheVersion=1&amp;api=v2&amp;width=633&amp;height=339"" srcset=""https://accoladeinc.atlassian.net/wiki/download/thumbnails/1936556364/variations.png?version=1&amp;modificationDate=1698927165936&amp;cacheVersion=1&amp;api=v2&amp;width=1266&amp;height=678 2x, https://accoladeinc.atlassian.net/wiki/download/thumbnails/1936556364/variations.png?version=1&amp;modificationDate=1698927165936&amp;cacheVersion=1&amp;api=v2&amp;width=633&amp;height=339 1x"" width=""633""/></span><p>When the <code>ml_cost_estimate</code> feature flag assumes a value other than 'off,' the <code>.enabled</code> method will return <code>True</code>. Additionally, it's possible to retrieve the <code>ml_model</code> variable by using the <code>variables</code> method.</p><span class=""confluence-embedded-file-wrapper image-center-wrapper confluence-embedded-manual-size""><img class=""confluence-embedded-image image-center"" data-base-url=""https://accoladeinc.atlassian.net/wiki"" data-height=""659"" data-image-src=""https://accoladeinc.atlassian.net/wiki/download/attachments/1936556364/image-20231102-121319.png?version=1&amp;modificationDate=1698927202624&amp;cacheVersion=1&amp;api=v2"" data-linked-resource-container-id=""1936556364"" data-linked-resource-container-version=""27"" data-linked-resource-content-type=""image/png"" data-linked-resource-default-alias=""image-20231102-121319.png"" data-linked-resource-id=""1937244256"" data-linked-resource-type=""attachment"" data-linked-resource-version=""1"" data-media-id=""d2122be0-3633-4508-8101-635933cbd371"" data-media-type=""file"" data-unresolved-comment-count=""0"" data-width=""736"" loading=""lazy"" src=""https://accoladeinc.atlassian.net/wiki/download/thumbnails/1936556364/image-20231102-121319.png?version=1&amp;modificationDate=1698927202624&amp;cacheVersion=1&amp;api=v2&amp;width=436&amp;height=390"" srcset=""https://accoladeinc.atlassian.net/wiki/download/thumbnails/1936556364/image-20231102-121319.png?version=1&amp;modificationDate=1698927202624&amp;cacheVersion=1&amp;api=v2&amp;width=736&amp;height=659 2x, https://accoladeinc.atlassian.net/wiki/download/thumbnails/1936556364/image-20231102-121319.png?version=1&amp;modificationDate=1698927202624&amp;cacheVersion=1&amp;api=v2&amp;width=436&amp;height=390 1x"" width=""436""/></span><h4 id=""OptimizelyBackendIntegrationforfeatureflags-BeforetheTransition(ConstanceFlags)"">Before the Transition (Constance Flags)</h4><div class=""code panel pdl conf-macro output-block"" data-hasbody=""true"" data-macro-id=""66d94161-331f-4944-b622-80b2913cce92"" data-macro-name=""code"" style=""border-width: 1px;""><div class=""codeContent panelContent pdl"">
<pre class=""syntaxhighlighter-pre"" data-syntaxhighlighter-params=""brush: java; gutter: false; theme: Confluence"" data-theme=""Confluence"">from constance import config

if config.ML_COST_ESTIMATE:
    # Implement ML cost estimation logic
    ml_model_choice = config.ML_COST_ESTIMATE_MODEL_CHOICE
else:
    # Implement default behavior</pre>
</div></div><div class=""code panel pdl conf-macro output-block"" data-hasbody=""true"" data-macro-id=""8afae362-12ac-46ee-baa6-a4ffaeb0f2a5"" data-macro-name=""code"" style=""border-width: 1px;""><div class=""codeContent panelContent pdl"">
<pre class=""syntaxhighlighter-pre"" data-syntaxhighlighter-params=""brush: java; gutter: false; theme: Confluence"" data-theme=""Confluence"">from constance import config

if config.ML_COST_ESTIMATE_OVERRIDE:
    # Implement ML cost estimation override logic
else:
    # Implement default behavior</pre>
</div></div><h4 id=""OptimizelyBackendIntegrationforfeatureflags-AftertheTransition(OptimizelyFlags)"">After the Transition (Optimizely Flags)</h4><div class=""code panel pdl conf-macro output-block"" data-hasbody=""true"" data-macro-id=""ce02e32e-95ee-40f1-9951-39409a2fe153"" data-macro-name=""code"" style=""border-width: 1px;""><div class=""codeContent panelContent pdl"">
<pre class=""syntaxhighlighter-pre"" data-syntaxhighlighter-params=""brush: java; gutter: false; theme: Confluence"" data-theme=""Confluence"">from plushcareAPI.clients.optimizely.client import optimizely_cli

# Retrieve the Optimizely decision for the ml_cost_estimate flag
ml_cost_estimate_decision = optimizely_cli.get_flag(""ml_cost_estimate"", user_profile)

if ml_cost_estimate_decision.enabled:
    # Implement ML cost estimation logic
    ml_model = ml_cost_estimate_decision.variables.get(""ml_model"")
    # ml_model now contains the chosen ML model
else:
    # Implement default behavior</pre>
</div></div><h3 id=""OptimizelyBackendIntegrationforfeatureflags-BenefitsoftheTransition"">Benefits of the Transition</h3><p>The transition to Optimizely flags has provided several benefits to our development process:</p><ol start=""1""><li><p><strong>Real-time Control:</strong> With Optimizely, we can make feature flag changes in real-time without requiring code deployments or database updates.</p></li><li><p><strong>Traceability</strong>: Everything gets recorded on Optimizely panel app.</p></li><li><p><strong>Experimentation:</strong> Optimizely's experimentation features allow us to perform A/B testing and safely introduce new features to a subset of users.</p></li><li><p><strong>User Context:</strong> Optimizely allows us to create user contexts and personalize feature flag decisions for different user segments.</p></li></ol><p>This real-world example demonstrates how we successfully integrated Optimizely flags into our API to replace the Constance feature flags, resulting in improved efficiency and greater control over feature flag management.</p>]"
"1459224598","Table of Contents Quick LinksAB Testing With Optimizely [Web]Segment Optimizely IntegrationRollout StrategyFeature Flagging Best PracticesOptimizely evaluationWeb Feature Flagging by App VariantOptimizely Backend Integration for feature flagsFAQsAccessAccess to Optimizely is currently managed by Nicolas Mizono and Sebastian Grobelny please reach out to one of them, we’re currently in the process of setting up an Okta TileFE vs BE - when to use one or the otherFE Optimizely receives Segment’s anonymousID as the primary identifier whereas on the BE we're passing the logged in userIDReason for this is Product wanted the ability to run experiments on anonymous users on the Booking Flow when talking with Optimizely this was the approach they recommended - two projects one where we can run tests/flags on anonymous users and one where we can run flags on logged in usersIf you need to build a feature flag where assignment spans across all clients (Web, iOS, Android) recommendation is to use the BE, if you're just feature-flagging one client and Product is comfortable with the anonymous constraint recommendation is to use the FE flag for the platform you're feature flaggingAd Block Impact on Web SDKIn short, our Feature Experimentation product is not typically affected by pop-up blockers as it can be with our Web Experimentation product. However, there is a possibility that an ad blocker could block the SDKs request to get a fresh datafile, which is integral to delivering up-to-date flags and rules where you may be running tests.  To circumvent this issue, you have the option to self-host the Optimizely datafile instead of relying on the datafile response from cdn.optimizely.com. If you host it on the same domain as your website, pop-up blockers should not interfere. If you would like to read a little more about it, please visit our article: Ad blockers impact on Feature Experimentation. While this does not provide a step-by-step process for self-hosting the datafile, I'm happy to walk you through a general approach to doing so. Essentially, we just want to ensure that the datafile is loaded as a resource from the same domain as your site. Wherever your site is hosted, you should include a copy of the datafile there that you'll reference as the foundation of your SDK instance. Then, you'll want to make sure that you have a strategy for updating the datafile as soon as changes are applied as is detailed in webhook documentation.  Video Recordingshttps://tech-learn-accolade.podbean.com/e/optimizely-lunch-learn/ - Optimizely BE Lunch and Learn","[<p><strong>Table of Contents</strong></p><div class=""toc-macro client-side-toc-macro conf-macro output-block"" data-hasbody=""false"" data-headerelements=""H1,H2,H3,H4,H5,H6,H7"" data-layout=""default"" data-local-id=""3b25714c-4eb9-4f82-8506-5fdd1b550a8d"" data-macro-id=""281e3253-55ad-4b65-91b6-665ad075f97b"" data-macro-name=""toc""> </div><p><strong>Quick Links</strong></p><ul class=""childpages-macro conf-macro output-block"" data-hasbody=""false"" data-layout=""default"" data-local-id=""dd9604c4-dbaa-4070-b427-f2b554420358"" data-macro-id=""5df11e36-5aa8-4d96-bfb7-f6283141578f"" data-macro-name=""children""><li><a data-linked-resource-id=""1460043871"" data-linked-resource-type=""page"" data-linked-resource-version=""40"" href=""/wiki/spaces/ENGINEERIN/pages/1460043871"">AB Testing With Optimizely [Web]</a></li><li><a data-linked-resource-id=""1635123365"" data-linked-resource-type=""page"" data-linked-resource-version=""4"" href=""/wiki/spaces/ENGINEERIN/pages/1635123365/Segment+Optimizely+Integration"">Segment Optimizely Integration</a></li><li><a data-linked-resource-id=""1634239443"" data-linked-resource-type=""page"" data-linked-resource-version=""1"" href=""/wiki/spaces/ENGINEERIN/pages/1634239443/Rollout+Strategy"">Rollout Strategy</a></li><li><a data-linked-resource-id=""1634566647"" data-linked-resource-type=""page"" data-linked-resource-version=""4"" href=""/wiki/spaces/ENGINEERIN/pages/1634566647/Feature+Flagging+Best+Practices"">Feature Flagging Best Practices</a></li><li><a data-linked-resource-id=""1713012798"" data-linked-resource-type=""page"" data-linked-resource-version=""1"" href=""/wiki/spaces/ENGINEERIN/pages/1713012798/Optimizely+evaluation"">Optimizely evaluation</a></li><li><a data-linked-resource-id=""1802207377"" data-linked-resource-type=""page"" data-linked-resource-version=""1"" href=""/wiki/spaces/ENGINEERIN/pages/1802207377/Web+Feature+Flagging+by+App+Variant"">Web Feature Flagging by App Variant</a></li><li><a data-linked-resource-id=""1936556364"" data-linked-resource-type=""page"" data-linked-resource-version=""27"" href=""/wiki/spaces/ENGINEERIN/pages/1936556364/Optimizely+Backend+Integration+for+feature+flags"">Optimizely Backend Integration for feature flags</a></li></ul><h1 id=""Optimizely-FAQs"">FAQs</h1><h1 id=""Optimizely-Access"">Access</h1><ul><li><p>Access to Optimizely is currently managed by <a class=""confluence-userlink user-mention"" data-account-id=""60db8f07a3de4a006b7f4263"" data-base-url=""https://accoladeinc.atlassian.net/wiki"" data-linked-resource-id=""1067878459"" data-linked-resource-type=""userinfo"" data-linked-resource-version=""1"" href=""https://accoladeinc.atlassian.net/wiki/people/60db8f07a3de4a006b7f4263?ref=confluence"" target=""_blank"">Nicolas Mizono</a> and <a class=""confluence-userlink user-mention"" data-account-id=""60db8efa22c0920071a3020a"" data-base-url=""https://accoladeinc.atlassian.net/wiki"" data-linked-resource-id=""1067877213"" data-linked-resource-type=""userinfo"" data-linked-resource-version=""1"" href=""https://accoladeinc.atlassian.net/wiki/people/60db8efa22c0920071a3020a?ref=confluence"" target=""_blank"">Sebastian Grobelny</a> please reach out to one of them, we’re currently in the process of setting up an Okta Tile</p></li></ul><h2 id=""Optimizely-FEvsBE-whentouseoneortheother"">FE vs BE - when to use one or the other</h2><ul><li><p>FE Optimizely receives Segment’s anonymousID as the primary identifier whereas on the BE we're passing the logged in userID</p></li><li><p>Reason for this is Product wanted the ability to run experiments on anonymous users on the Booking Flow when talking with Optimizely this was the approach they recommended - two projects one where we can run tests/flags on anonymous users and one where we can run flags on logged in users</p></li><li><p>If you need to build a feature flag where assignment spans across all clients (Web, iOS, Android) recommendation is to use the BE, if you're just feature-flagging one client and Product is comfortable with the anonymous constraint recommendation is to use the FE flag for the platform you're feature flagging</p></li></ul><h2 id=""Optimizely-AdBlockImpactonWebSDK"">Ad Block Impact on Web SDK</h2><p>In short, our Feature Experimentation product is not typically affected by pop-up blockers as it can be with our Web Experimentation product. However, there is a possibility that an ad blocker could block the SDKs request to get a <strong>fresh datafile</strong>, which is integral to delivering up-to-date flags and rules where you may be running tests. <br/> <br/>To circumvent this issue, you have the option to <strong>self-host</strong> the Optimizely datafile instead of relying on the datafile response from <a class=""external-link"" href=""http://cdn.optimizely.com/"" rel=""nofollow"">cdn.optimizely.com</a>. If you host it on the same domain as your website, pop-up blockers should not interfere. <br/>If you would like to read a little more about it, please visit our article: <a class=""external-link"" href=""https://support.optimizely.com/hc/en-us/articles/4410289657869#Ad_blockers_impact_on_Optimizely_Full_Stack_experiments"" rel=""nofollow"">Ad blockers impact on Feature Experimentation</a>. While this does not provide a step-by-step process for self-hosting the datafile, I'm happy to walk you through a general approach to doing so. <br/>Essentially, we just want to ensure that the datafile is loaded as a resource from the same domain as your site. Wherever your site is hosted, you should include a copy of the datafile there that you'll reference as the foundation of your SDK instance. Then, you'll want to make sure that you have a strategy for updating the datafile as soon as changes are applied as is detailed in <a class=""external-link"" href=""https://docs.developers.optimizely.com/full-stack-experimentation/docs/configure-webhooks"" rel=""nofollow"">webhook documentation</a>.  </p><p></p><h2 id=""Optimizely-VideoRecordings"">Video Recordings</h2><p><a class=""external-link"" href=""https://tech-learn-accolade.podbean.com/e/optimizely-lunch-learn/"" rel=""nofollow""><u>https://tech-learn-accolade.podbean.com/e/optimizely-lunch-learn/</u></a> - Optimizely BE Lunch and Learn</p>]"
